{"ast":null,"code":"/**\r\n * alertifyjs 1.12.0 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\n(function (window) {\n  'use strict';\n\n  var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\n  /**\r\n   * Keys enum\r\n   * @type {Object}\r\n   */\n\n  var keys = {\n    ENTER: 13,\n    ESC: 27,\n    F1: 112,\n    F12: 123,\n    LEFT: 37,\n    RIGHT: 39,\n    TAB: 9\n  };\n  /**\r\n   * Default options \r\n   * @type {Object}\r\n   */\n\n  var defaults = {\n    autoReset: true,\n    basic: false,\n    closable: true,\n    closableByDimmer: true,\n    invokeOnCloseOff: false,\n    frameless: false,\n    defaultFocusOff: false,\n    maintainFocus: true,\n    //global default not per instance, applies to all dialogs\n    maximizable: true,\n    modal: true,\n    movable: true,\n    moveBounded: false,\n    overflow: true,\n    padding: true,\n    pinnable: true,\n    pinned: true,\n    preventBodyShift: false,\n    //global default not per instance, applies to all dialogs\n    resizable: true,\n    startMaximized: false,\n    transition: 'pulse',\n    tabbable: ['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])' + NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET + ','),\n    //global\n    notifier: {\n      delay: 5,\n      position: 'bottom-right',\n      closeButton: false,\n      classes: {\n        base: 'alertify-notifier',\n        prefix: 'ajs-',\n        message: 'ajs-message',\n        top: 'ajs-top',\n        right: 'ajs-right',\n        bottom: 'ajs-bottom',\n        left: 'ajs-left',\n        center: 'ajs-center',\n        visible: 'ajs-visible',\n        hidden: 'ajs-hidden',\n        close: 'ajs-close'\n      }\n    },\n    glossary: {\n      title: 'AlertifyJS',\n      ok: 'OK',\n      cancel: 'Cancel',\n      acccpt: 'Accept',\n      deny: 'Deny',\n      confirm: 'Confirm',\n      decline: 'Decline',\n      close: 'Close',\n      maximize: 'Maximize',\n      restore: 'Restore'\n    },\n    theme: {\n      input: 'ajs-input',\n      ok: 'ajs-ok',\n      cancel: 'ajs-cancel'\n    },\n    hooks: {\n      preinit: function () {},\n      postinit: function () {}\n    }\n  }; //holds open dialogs instances\n\n  var openDialogs = [];\n  /**\r\n   * [Helper]  Adds the specified class(es) to the element.\r\n   *\r\n   * @element {node}      The element\r\n   * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n   * \r\n   * @return {undefined}\r\n   */\n\n  function addClass(element, classNames) {\n    element.className += ' ' + classNames;\n  }\n  /**\r\n   * [Helper]  Removes the specified class(es) from the element.\r\n   *\r\n   * @element {node}      The element\r\n   * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n   * \r\n   * @return {undefined}\r\n   */\n\n\n  function removeClass(element, classNames) {\n    var original = element.className.split(' ');\n    var toBeRemoved = classNames.split(' ');\n\n    for (var x = 0; x < toBeRemoved.length; x += 1) {\n      var index = original.indexOf(toBeRemoved[x]);\n\n      if (index > -1) {\n        original.splice(index, 1);\n      }\n    }\n\n    element.className = original.join(' ');\n  }\n  /**\r\n   * [Helper]  Checks if the document is RTL\r\n   *\r\n   * @return {Boolean} True if the document is RTL, false otherwise.\r\n   */\n\n\n  function isRightToLeft() {\n    return window.getComputedStyle(document.body).direction === 'rtl';\n  }\n  /**\r\n   * [Helper]  Get the document current scrollTop\r\n   *\r\n   * @return {Number} current document scrollTop value\r\n   */\n\n\n  function getScrollTop() {\n    return document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;\n  }\n  /**\r\n   * [Helper]  Get the document current scrollLeft\r\n   *\r\n   * @return {Number} current document scrollLeft value\r\n   */\n\n\n  function getScrollLeft() {\n    return document.documentElement && document.documentElement.scrollLeft || document.body.scrollLeft;\n  }\n  /**\r\n  * Helper: clear contents\r\n  *\r\n  */\n\n\n  function clearContents(element) {\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  }\n  /**\r\n   * Extends a given prototype by merging properties from base into sub.\r\n   *\r\n   * @sub {Object} sub The prototype being overwritten.\r\n   * @base {Object} base The prototype being written.\r\n   *\r\n   * @return {Object} The extended prototype.\r\n   */\n\n\n  function copy(src) {\n    if (null === src) {\n      return src;\n    }\n\n    var cpy;\n\n    if (Array.isArray(src)) {\n      cpy = [];\n\n      for (var x = 0; x < src.length; x += 1) {\n        cpy.push(copy(src[x]));\n      }\n\n      return cpy;\n    }\n\n    if (src instanceof Date) {\n      return new Date(src.getTime());\n    }\n\n    if (src instanceof RegExp) {\n      cpy = new RegExp(src.source);\n      cpy.global = src.global;\n      cpy.ignoreCase = src.ignoreCase;\n      cpy.multiline = src.multiline;\n      cpy.lastIndex = src.lastIndex;\n      return cpy;\n    }\n\n    if (typeof src === 'object') {\n      cpy = {}; // copy dialog pototype over definition.\n\n      for (var prop in src) {\n        if (src.hasOwnProperty(prop)) {\n          cpy[prop] = copy(src[prop]);\n        }\n      }\n\n      return cpy;\n    }\n\n    return src;\n  }\n  /**\r\n    * Helper: destruct the dialog\r\n    *\r\n    */\n\n\n  function destruct(instance, initialize) {\n    if (instance.elements) {\n      //delete the dom and it's references.\n      var root = instance.elements.root;\n      root.parentNode.removeChild(root);\n      delete instance.elements; //copy back initial settings.\n\n      instance.settings = copy(instance.__settings); //re-reference init function.\n\n      instance.__init = initialize; //delete __internal variable to allow re-initialization.\n\n      delete instance.__internal;\n    }\n  }\n  /**\r\n   * Use a closure to return proper event listener method. Try to use\r\n   * `addEventListener` by default but fallback to `attachEvent` for\r\n   * unsupported browser. The closure simply ensures that the test doesn't\r\n   * happen every time the method is called.\r\n   *\r\n   * @param    {Node}     el    Node element\r\n   * @param    {String}   event Event type\r\n   * @param    {Function} fn    Callback of event\r\n   * @return   {Function}\r\n   */\n\n\n  var on = function () {\n    if (document.addEventListener) {\n      return function (el, event, fn, useCapture) {\n        el.addEventListener(event, fn, useCapture === true);\n      };\n    } else if (document.attachEvent) {\n      return function (el, event, fn) {\n        el.attachEvent('on' + event, fn);\n      };\n    }\n  }();\n  /**\r\n   * Use a closure to return proper event listener method. Try to use\r\n   * `removeEventListener` by default but fallback to `detachEvent` for\r\n   * unsupported browser. The closure simply ensures that the test doesn't\r\n   * happen every time the method is called.\r\n   *\r\n   * @param    {Node}     el    Node element\r\n   * @param    {String}   event Event type\r\n   * @param    {Function} fn    Callback of event\r\n   * @return   {Function}\r\n   */\n\n\n  var off = function () {\n    if (document.removeEventListener) {\n      return function (el, event, fn, useCapture) {\n        el.removeEventListener(event, fn, useCapture === true);\n      };\n    } else if (document.detachEvent) {\n      return function (el, event, fn) {\n        el.detachEvent('on' + event, fn);\n      };\n    }\n  }();\n  /**\r\n   * Prevent default event from firing\r\n   *\r\n   * @param  {Event} event Event object\r\n   * @return {undefined}\r\n    function prevent ( event ) {\r\n      if ( event ) {\r\n          if ( event.preventDefault ) {\r\n              event.preventDefault();\r\n          } else {\r\n              event.returnValue = false;\r\n          }\r\n      }\r\n  }\r\n  */\n\n\n  var transition = function () {\n    var t, type;\n    var supported = false;\n    var transitions = {\n      'animation': 'animationend',\n      'OAnimation': 'oAnimationEnd oanimationend',\n      'msAnimation': 'MSAnimationEnd',\n      'MozAnimation': 'animationend',\n      'WebkitAnimation': 'webkitAnimationEnd'\n    };\n\n    for (t in transitions) {\n      if (document.documentElement.style[t] !== undefined) {\n        type = transitions[t];\n        supported = true;\n        break;\n      }\n    }\n\n    return {\n      type: type,\n      supported: supported\n    };\n  }();\n  /**\r\n  * Creates event handler delegate that sends the instance as last argument.\r\n  * \r\n  * @return {Function}    a function wrapper which sends the instance as last argument.\r\n  */\n\n\n  function delegate(context, method) {\n    return function () {\n      if (arguments.length > 0) {\n        var args = [];\n\n        for (var x = 0; x < arguments.length; x += 1) {\n          args.push(arguments[x]);\n        }\n\n        args.push(context);\n        return method.apply(context, args);\n      }\n\n      return method.apply(context, [null, context]);\n    };\n  }\n  /**\r\n  * Helper for creating a dialog close event.\r\n  * \r\n  * @return {object}\r\n  */\n\n\n  function createCloseEvent(index, button) {\n    return {\n      index: index,\n      button: button,\n      cancel: false\n    };\n  }\n  /**\r\n  * Helper for dispatching events.\r\n  *\r\n  * @param  {string} evenType The type of the event to disptach.\r\n  * @param  {object} instance The dialog instance disptaching the event.\r\n  *\r\n  * @return   {any}   The result of the invoked function.\r\n  */\n\n\n  function dispatchEvent(eventType, instance) {\n    if (typeof instance.get(eventType) === 'function') {\n      return instance.get(eventType).call(instance);\n    }\n  }\n  /**\r\n   * Super class for all dialogs\r\n   *\r\n   * @return {Object}\t\tbase dialog prototype\r\n   */\n\n\n  var dialog = function () {\n    var //holds the list of used keys.\n    usedKeys = [],\n        //dummy variable, used to trigger dom reflow.\n    reflow = null,\n        //holds body tab index in case it has any.\n    tabindex = false,\n        //condition for detecting safari\n    isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\n        //dialog building blocks\n    templates = {\n      dimmer: '<div class=\"ajs-dimmer\"></div>',\n\n      /*tab index required to fire click event before body focus*/\n      modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\n      dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\n      reset: '<button class=\"ajs-reset\"></button>',\n      commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\n      header: '<div class=\"ajs-header\"></div>',\n      body: '<div class=\"ajs-body\"></div>',\n      content: '<div class=\"ajs-content\"></div>',\n      footer: '<div class=\"ajs-footer\"></div>',\n      buttons: {\n        primary: '<div class=\"ajs-primary ajs-buttons\"></div>',\n        auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>'\n      },\n      button: '<button class=\"ajs-button\"></button>',\n      resizeHandle: '<div class=\"ajs-handle\"></div>'\n    },\n        //common class names\n    classes = {\n      animationIn: 'ajs-in',\n      animationOut: 'ajs-out',\n      base: 'alertify',\n      basic: 'ajs-basic',\n      capture: 'ajs-capture',\n      closable: 'ajs-closable',\n      fixed: 'ajs-fixed',\n      frameless: 'ajs-frameless',\n      hidden: 'ajs-hidden',\n      maximize: 'ajs-maximize',\n      maximized: 'ajs-maximized',\n      maximizable: 'ajs-maximizable',\n      modeless: 'ajs-modeless',\n      movable: 'ajs-movable',\n      noSelection: 'ajs-no-selection',\n      noOverflow: 'ajs-no-overflow',\n      noPadding: 'ajs-no-padding',\n      pin: 'ajs-pin',\n      pinnable: 'ajs-pinnable',\n      prefix: 'ajs-',\n      resizable: 'ajs-resizable',\n      restore: 'ajs-restore',\n      shake: 'ajs-shake',\n      unpinned: 'ajs-unpinned'\n    };\n    /**\r\n     * Helper: initializes the dialog instance\r\n     * \r\n     * @return\t{Number}\tThe total count of currently open modals.\r\n     */\n\n    function initialize(instance) {\n      if (!instance.__internal) {\n        //invoke preinit global hook\n        alertify.defaults.hooks.preinit(instance); //no need to expose init after this.\n\n        delete instance.__init; //keep a copy of initial dialog settings\n\n        if (!instance.__settings) {\n          instance.__settings = copy(instance.settings);\n        } //get dialog buttons/focus setup\n\n\n        var setup;\n\n        if (typeof instance.setup === 'function') {\n          setup = instance.setup();\n          setup.options = setup.options || {};\n          setup.focus = setup.focus || {};\n        } else {\n          setup = {\n            buttons: [],\n            focus: {\n              element: null,\n              select: false\n            },\n            options: {}\n          };\n        } //initialize hooks object.\n\n\n        if (typeof instance.hooks !== 'object') {\n          instance.hooks = {};\n        } //copy buttons defintion\n\n\n        var buttonsDefinition = [];\n\n        if (Array.isArray(setup.buttons)) {\n          for (var b = 0; b < setup.buttons.length; b += 1) {\n            var ref = setup.buttons[b],\n                cpy = {};\n\n            for (var i in ref) {\n              if (ref.hasOwnProperty(i)) {\n                cpy[i] = ref[i];\n              }\n            }\n\n            buttonsDefinition.push(cpy);\n          }\n        }\n\n        var internal = instance.__internal = {\n          /**\r\n           * Flag holding the open state of the dialog\r\n           * \r\n           * @type {Boolean}\r\n           */\n          isOpen: false,\n\n          /**\r\n           * Active element is the element that will receive focus after\r\n           * closing the dialog. It defaults as the body tag, but gets updated\r\n           * to the last focused element before the dialog was opened.\r\n           *\r\n           * @type {Node}\r\n           */\n          activeElement: document.body,\n          timerIn: undefined,\n          timerOut: undefined,\n          buttons: buttonsDefinition,\n          focus: setup.focus,\n          options: {\n            title: undefined,\n            modal: undefined,\n            basic: undefined,\n            frameless: undefined,\n            defaultFocusOff: undefined,\n            pinned: undefined,\n            movable: undefined,\n            moveBounded: undefined,\n            resizable: undefined,\n            autoReset: undefined,\n            closable: undefined,\n            closableByDimmer: undefined,\n            invokeOnCloseOff: undefined,\n            maximizable: undefined,\n            startMaximized: undefined,\n            pinnable: undefined,\n            transition: undefined,\n            padding: undefined,\n            overflow: undefined,\n            onshow: undefined,\n            onclosing: undefined,\n            onclose: undefined,\n            onfocus: undefined,\n            onmove: undefined,\n            onmoved: undefined,\n            onresize: undefined,\n            onresized: undefined,\n            onmaximize: undefined,\n            onmaximized: undefined,\n            onrestore: undefined,\n            onrestored: undefined\n          },\n          resetHandler: undefined,\n          beginMoveHandler: undefined,\n          beginResizeHandler: undefined,\n          bringToFrontHandler: undefined,\n          modalClickHandler: undefined,\n          buttonsClickHandler: undefined,\n          commandsClickHandler: undefined,\n          transitionInHandler: undefined,\n          transitionOutHandler: undefined,\n          destroy: undefined\n        };\n        var elements = {}; //root node\n\n        elements.root = document.createElement('div'); //prevent FOUC in case of async styles loading.\n\n        elements.root.style.display = 'none';\n        elements.root.className = classes.base + ' ' + classes.hidden + ' ';\n        elements.root.innerHTML = templates.dimmer + templates.modal; //dimmer\n\n        elements.dimmer = elements.root.firstChild; //dialog\n\n        elements.modal = elements.root.lastChild;\n        elements.modal.innerHTML = templates.dialog;\n        elements.dialog = elements.modal.firstChild;\n        elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset; //reset links\n\n        elements.reset = [];\n        elements.reset.push(elements.dialog.firstChild);\n        elements.reset.push(elements.dialog.lastChild); //commands\n\n        elements.commands = {};\n        elements.commands.container = elements.reset[0].nextSibling;\n        elements.commands.pin = elements.commands.container.firstChild;\n        elements.commands.maximize = elements.commands.pin.nextSibling;\n        elements.commands.close = elements.commands.maximize.nextSibling; //header\n\n        elements.header = elements.commands.container.nextSibling; //body\n\n        elements.body = elements.header.nextSibling;\n        elements.body.innerHTML = templates.content;\n        elements.content = elements.body.firstChild; //footer\n\n        elements.footer = elements.body.nextSibling;\n        elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary; //resize handle\n\n        elements.resizeHandle = elements.footer.nextSibling; //buttons\n\n        elements.buttons = {};\n        elements.buttons.auxiliary = elements.footer.firstChild;\n        elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\n        elements.buttons.primary.innerHTML = templates.button;\n        elements.buttonTemplate = elements.buttons.primary.firstChild; //remove button template\n\n        elements.buttons.primary.removeChild(elements.buttonTemplate);\n\n        for (var x = 0; x < instance.__internal.buttons.length; x += 1) {\n          var button = instance.__internal.buttons[x]; // add to the list of used keys.\n\n          if (usedKeys.indexOf(button.key) < 0) {\n            usedKeys.push(button.key);\n          }\n\n          button.element = elements.buttonTemplate.cloneNode();\n          button.element.innerHTML = button.text;\n\n          if (typeof button.className === 'string' && button.className !== '') {\n            addClass(button.element, button.className);\n          }\n\n          for (var key in button.attrs) {\n            if (key !== 'className' && button.attrs.hasOwnProperty(key)) {\n              button.element.setAttribute(key, button.attrs[key]);\n            }\n          }\n\n          if (button.scope === 'auxiliary') {\n            elements.buttons.auxiliary.appendChild(button.element);\n          } else {\n            elements.buttons.primary.appendChild(button.element);\n          }\n        } //make elements pubic\n\n\n        instance.elements = elements; //save event handlers delegates\n\n        internal.resetHandler = delegate(instance, onReset);\n        internal.beginMoveHandler = delegate(instance, beginMove);\n        internal.beginResizeHandler = delegate(instance, beginResize);\n        internal.bringToFrontHandler = delegate(instance, bringToFront);\n        internal.modalClickHandler = delegate(instance, modalClickHandler);\n        internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\n        internal.commandsClickHandler = delegate(instance, commandsClickHandler);\n        internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\n        internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent); //settings\n\n        for (var opKey in internal.options) {\n          if (setup.options[opKey] !== undefined) {\n            // if found in user options\n            instance.set(opKey, setup.options[opKey]);\n          } else if (alertify.defaults.hasOwnProperty(opKey)) {\n            // else if found in defaults options\n            instance.set(opKey, alertify.defaults[opKey]);\n          } else if (opKey === 'title') {\n            // else if title key, use alertify.defaults.glossary\n            instance.set(opKey, alertify.defaults.glossary[opKey]);\n          }\n        } // allow dom customization\n\n\n        if (typeof instance.build === 'function') {\n          instance.build();\n        } //invoke postinit global hook\n\n\n        alertify.defaults.hooks.postinit(instance);\n      } //add to the end of the DOM tree.\n\n\n      document.body.appendChild(instance.elements.root);\n    }\n    /**\r\n     * Helper: maintains scroll position\r\n     *\r\n     */\n\n\n    var scrollX, scrollY;\n\n    function saveScrollPosition() {\n      scrollX = getScrollLeft();\n      scrollY = getScrollTop();\n    }\n\n    function restoreScrollPosition() {\n      window.scrollTo(scrollX, scrollY);\n    }\n    /**\r\n     * Helper: adds/removes no-overflow class from body\r\n     *\r\n     */\n\n\n    function ensureNoOverflow() {\n      var requiresNoOverflow = 0;\n\n      for (var x = 0; x < openDialogs.length; x += 1) {\n        var instance = openDialogs[x];\n\n        if (instance.isModal() || instance.isMaximized()) {\n          requiresNoOverflow += 1;\n        }\n      }\n\n      if (requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0) {\n        //last open modal or last maximized one\n        removeClass(document.body, classes.noOverflow);\n        preventBodyShift(false);\n      } else if (requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0) {\n        //first open modal or first maximized one\n        preventBodyShift(true);\n        addClass(document.body, classes.noOverflow);\n      }\n    }\n\n    var top = '',\n        topScroll = 0;\n    /**\r\n     * Helper: prevents body shift.\r\n     *\r\n     */\n\n    function preventBodyShift(add) {\n      if (alertify.defaults.preventBodyShift) {\n        if (add && document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n          //&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\n          topScroll = scrollY;\n          top = window.getComputedStyle(document.body).top;\n          addClass(document.body, classes.fixed);\n          document.body.style.top = -scrollY + 'px';\n        } else if (!add) {\n          scrollY = topScroll;\n          document.body.style.top = top;\n          removeClass(document.body, classes.fixed);\n          restoreScrollPosition();\n        }\n      }\n    }\n    /**\r\n     * Sets the name of the transition used to show/hide the dialog\r\n     * \r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     */\n\n\n    function updateTransition(instance, value, oldValue) {\n      if (typeof oldValue === 'string') {\n        removeClass(instance.elements.root, classes.prefix + oldValue);\n      }\n\n      addClass(instance.elements.root, classes.prefix + value);\n      reflow = instance.elements.root.offsetWidth;\n    }\n    /**\r\n     * Toggles the dialog display mode\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updateDisplayMode(instance) {\n      if (instance.get('modal')) {\n        //make modal\n        removeClass(instance.elements.root, classes.modeless); //only if open\n\n        if (instance.isOpen()) {\n          unbindModelessEvents(instance); //in case a pinned modless dialog was made modal while open.\n\n          updateAbsPositionFix(instance);\n          ensureNoOverflow();\n        }\n      } else {\n        //make modelss\n        addClass(instance.elements.root, classes.modeless); //only if open\n\n        if (instance.isOpen()) {\n          bindModelessEvents(instance); //in case pin/unpin was called while a modal is open\n\n          updateAbsPositionFix(instance);\n          ensureNoOverflow();\n        }\n      }\n    }\n    /**\r\n     * Toggles the dialog basic view mode \r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updateBasicMode(instance) {\n      if (instance.get('basic')) {\n        // add class\n        addClass(instance.elements.root, classes.basic);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.basic);\n      }\n    }\n    /**\r\n     * Toggles the dialog frameless view mode \r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updateFramelessMode(instance) {\n      if (instance.get('frameless')) {\n        // add class\n        addClass(instance.elements.root, classes.frameless);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.frameless);\n      }\n    }\n    /**\r\n     * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n     *\r\n     * @param {Event} event Focus event\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function bringToFront(event, instance) {\n      // Do not bring to front if preceeded by an open modal\n      var index = openDialogs.indexOf(instance);\n\n      for (var x = index + 1; x < openDialogs.length; x += 1) {\n        if (openDialogs[x].isModal()) {\n          return;\n        }\n      } // Bring to front by making it the last child.\n\n\n      if (document.body.lastChild !== instance.elements.root) {\n        document.body.appendChild(instance.elements.root); //also make sure its at the end of the list\n\n        openDialogs.splice(openDialogs.indexOf(instance), 1);\n        openDialogs.push(instance);\n        setFocus(instance);\n      }\n\n      return false;\n    }\n    /**\r\n     * Helper: reflects dialogs options updates\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {String} option The updated option name.\r\n     *\r\n     * @return\t{undefined}\t\r\n     */\n\n\n    function optionUpdated(instance, option, oldValue, newValue) {\n      switch (option) {\n        case 'title':\n          instance.setHeader(newValue);\n          break;\n\n        case 'modal':\n          updateDisplayMode(instance);\n          break;\n\n        case 'basic':\n          updateBasicMode(instance);\n          break;\n\n        case 'frameless':\n          updateFramelessMode(instance);\n          break;\n\n        case 'pinned':\n          updatePinned(instance);\n          break;\n\n        case 'closable':\n          updateClosable(instance);\n          break;\n\n        case 'maximizable':\n          updateMaximizable(instance);\n          break;\n\n        case 'pinnable':\n          updatePinnable(instance);\n          break;\n\n        case 'movable':\n          updateMovable(instance);\n          break;\n\n        case 'resizable':\n          updateResizable(instance);\n          break;\n\n        case 'padding':\n          if (newValue) {\n            removeClass(instance.elements.root, classes.noPadding);\n          } else if (instance.elements.root.className.indexOf(classes.noPadding) < 0) {\n            addClass(instance.elements.root, classes.noPadding);\n          }\n\n          break;\n\n        case 'overflow':\n          if (newValue) {\n            removeClass(instance.elements.root, classes.noOverflow);\n          } else if (instance.elements.root.className.indexOf(classes.noOverflow) < 0) {\n            addClass(instance.elements.root, classes.noOverflow);\n          }\n\n          break;\n\n        case 'transition':\n          updateTransition(instance, newValue, oldValue);\n          break;\n      } // internal on option updated event\n\n\n      if (typeof instance.hooks.onupdate === 'function') {\n        instance.hooks.onupdate.call(instance, option, oldValue, newValue);\n      }\n    }\n    /**\r\n     * Helper: reflects dialogs options updates\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Object} obj The object to set/get a value on/from.\r\n     * @param {Function} callback The callback function to call if the key was found.\r\n     * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n     * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n     * @param {String} option The updated option name.\r\n     *\r\n     * @return\t{Object} result object \r\n     *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n     *\t\tGET: \r\n     *\t\t- found: a flag indicating if the key was found or not.\r\n     *\t\t- value: the property value.\r\n     *\t\tSET:\r\n     *\t\t- items: a list of key value pairs of the properties being set.\r\n     *\t\t\t\teach contains:\r\n     *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n     *\t\t\t\t\t- key: the property key.\r\n     *\t\t\t\t\t- value: the property value.\r\n     */\n\n\n    function update(instance, obj, callback, key, value) {\n      var result = {\n        op: undefined,\n        items: []\n      };\n\n      if (typeof value === 'undefined' && typeof key === 'string') {\n        //get\n        result.op = 'get';\n\n        if (obj.hasOwnProperty(key)) {\n          result.found = true;\n          result.value = obj[key];\n        } else {\n          result.found = false;\n          result.value = undefined;\n        }\n      } else {\n        var old; //set\n\n        result.op = 'set';\n\n        if (typeof key === 'object') {\n          //set multiple\n          var args = key;\n\n          for (var prop in args) {\n            if (obj.hasOwnProperty(prop)) {\n              if (obj[prop] !== args[prop]) {\n                old = obj[prop];\n                obj[prop] = args[prop];\n                callback.call(instance, prop, old, args[prop]);\n              }\n\n              result.items.push({\n                'key': prop,\n                'value': args[prop],\n                'found': true\n              });\n            } else {\n              result.items.push({\n                'key': prop,\n                'value': args[prop],\n                'found': false\n              });\n            }\n          }\n        } else if (typeof key === 'string') {\n          //set single\n          if (obj.hasOwnProperty(key)) {\n            if (obj[key] !== value) {\n              old = obj[key];\n              obj[key] = value;\n              callback.call(instance, key, old, value);\n            }\n\n            result.items.push({\n              'key': key,\n              'value': value,\n              'found': true\n            });\n          } else {\n            result.items.push({\n              'key': key,\n              'value': value,\n              'found': false\n            });\n          }\n        } else {\n          //invalid params\n          throw new Error('args must be a string or object');\n        }\n      }\n\n      return result;\n    }\n    /**\r\n     * Triggers a close event.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function triggerClose(instance) {\n      var found;\n      triggerCallback(instance, function (button) {\n        return found = instance.get('invokeOnCloseOff') !== true && button.invokeOnClose === true;\n      }); //none of the buttons registered as onclose callback\n      //close the dialog\n\n      if (!found && instance.isOpen()) {\n        instance.close();\n      }\n    }\n    /**\r\n     * Dialogs commands event handler, attached to the dialog commands element.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function commandsClickHandler(event, instance) {\n      var target = event.srcElement || event.target;\n\n      switch (target) {\n        case instance.elements.commands.pin:\n          if (!instance.isPinned()) {\n            pin(instance);\n          } else {\n            unpin(instance);\n          }\n\n          break;\n\n        case instance.elements.commands.maximize:\n          if (!instance.isMaximized()) {\n            maximize(instance);\n          } else {\n            restore(instance);\n          }\n\n          break;\n\n        case instance.elements.commands.close:\n          triggerClose(instance);\n          break;\n      }\n\n      return false;\n    }\n    /**\r\n     * Helper: pins the modeless dialog.\r\n     *\r\n     * @param {Object} instance\tThe dialog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function pin(instance) {\n      //pin the dialog\n      instance.set('pinned', true);\n    }\n    /**\r\n     * Helper: unpins the modeless dialog.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function unpin(instance) {\n      //unpin the dialog \n      instance.set('pinned', false);\n    }\n    /**\r\n     * Helper: enlarges the dialog to fill the entire screen.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function maximize(instance) {\n      // allow custom `onmaximize` method\n      dispatchEvent('onmaximize', instance); //maximize the dialog \n\n      addClass(instance.elements.root, classes.maximized);\n\n      if (instance.isOpen()) {\n        ensureNoOverflow();\n      } // allow custom `onmaximized` method\n\n\n      dispatchEvent('onmaximized', instance);\n    }\n    /**\r\n     * Helper: returns the dialog to its former size.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function restore(instance) {\n      // allow custom `onrestore` method\n      dispatchEvent('onrestore', instance); //maximize the dialog \n\n      removeClass(instance.elements.root, classes.maximized);\n\n      if (instance.isOpen()) {\n        ensureNoOverflow();\n      } // allow custom `onrestored` method\n\n\n      dispatchEvent('onrestored', instance);\n    }\n    /**\r\n     * Show or hide the maximize box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updatePinnable(instance) {\n      if (instance.get('pinnable')) {\n        // add class\n        addClass(instance.elements.root, classes.pinnable);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.pinnable);\n      }\n    }\n    /**\r\n     * Helper: Fixes the absolutly positioned modal div position.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function addAbsPositionFix(instance) {\n      var scrollLeft = getScrollLeft();\n      instance.elements.modal.style.marginTop = getScrollTop() + 'px';\n      instance.elements.modal.style.marginLeft = scrollLeft + 'px';\n      instance.elements.modal.style.marginRight = -scrollLeft + 'px';\n    }\n    /**\r\n     * Helper: Removes the absolutly positioned modal div position fix.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function removeAbsPositionFix(instance) {\n      var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\n      var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\n      instance.elements.modal.style.marginTop = '';\n      instance.elements.modal.style.marginLeft = '';\n      instance.elements.modal.style.marginRight = '';\n\n      if (instance.isOpen()) {\n        var top = 0,\n            left = 0;\n\n        if (instance.elements.dialog.style.top !== '') {\n          top = parseInt(instance.elements.dialog.style.top, 10);\n        }\n\n        instance.elements.dialog.style.top = top + (marginTop - getScrollTop()) + 'px';\n\n        if (instance.elements.dialog.style.left !== '') {\n          left = parseInt(instance.elements.dialog.style.left, 10);\n        }\n\n        instance.elements.dialog.style.left = left + (marginLeft - getScrollLeft()) + 'px';\n      }\n    }\n    /**\r\n     * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updateAbsPositionFix(instance) {\n      // if modeless and unpinned add fix\n      if (!instance.get('modal') && !instance.get('pinned')) {\n        addAbsPositionFix(instance);\n      } else {\n        removeAbsPositionFix(instance);\n      }\n    }\n    /**\r\n     * Toggles the dialog position lock | modeless only.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to make it modal, false otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updatePinned(instance) {\n      if (instance.get('pinned')) {\n        removeClass(instance.elements.root, classes.unpinned);\n\n        if (instance.isOpen()) {\n          removeAbsPositionFix(instance);\n        }\n      } else {\n        addClass(instance.elements.root, classes.unpinned);\n\n        if (instance.isOpen() && !instance.isModal()) {\n          addAbsPositionFix(instance);\n        }\n      }\n    }\n    /**\r\n     * Show or hide the maximize box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updateMaximizable(instance) {\n      if (instance.get('maximizable')) {\n        // add class\n        addClass(instance.elements.root, classes.maximizable);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.maximizable);\n      }\n    }\n    /**\r\n     * Show or hide the close box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updateClosable(instance) {\n      if (instance.get('closable')) {\n        // add class\n        addClass(instance.elements.root, classes.closable);\n        bindClosableEvents(instance);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.closable);\n        unbindClosableEvents(instance);\n      }\n    }\n\n    var cancelClick = false,\n        // flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\n    modalClickHandlerTS = 0 // stores last click timestamp to prevent executing the handler twice on double click.\n    ;\n    /**\r\n     * Helper: closes the modal dialog when clicking the modal\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n    function modalClickHandler(event, instance) {\n      if (event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick) {\n        var target = event.srcElement || event.target;\n\n        if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\n          triggerClose(instance);\n        }\n\n        cancelClick = false;\n        return false;\n      }\n    } // stores last call timestamp to prevent triggering the callback twice.\n\n\n    var callbackTS = 0; // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\n\n    var cancelKeyup = false;\n    /** \r\n     * Helper: triggers a button callback\r\n     *\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * @param {Function}\tCallback to check which button triggered the event.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n    function triggerCallback(instance, check) {\n      if (Date.now() - callbackTS > 200 && (callbackTS = Date.now())) {\n        for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\n          var button = instance.__internal.buttons[idx];\n\n          if (!button.element.disabled && check(button)) {\n            var closeEvent = createCloseEvent(idx, button);\n\n            if (typeof instance.callback === 'function') {\n              instance.callback.apply(instance, [closeEvent]);\n            } //close the dialog only if not canceled.\n\n\n            if (closeEvent.cancel === false) {\n              instance.close();\n            }\n\n            break;\n          }\n        }\n      }\n    }\n    /**\r\n     * Clicks event handler, attached to the dialog footer.\r\n     *\r\n     * @param {Event}\t\tDOM event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function buttonsClickHandler(event, instance) {\n      var target = event.srcElement || event.target;\n      triggerCallback(instance, function (button) {\n        // if this button caused the click, cancel keyup event\n        return button.element === target && (cancelKeyup = true);\n      });\n    }\n    /**\r\n     * Keyup event handler, attached to the document.body\r\n     *\r\n     * @param {Event}\t\tDOM event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function keyupHandler(event) {\n      //hitting enter while button has focus will trigger keyup too.\n      //ignore if handled by clickHandler\n      if (cancelKeyup) {\n        cancelKeyup = false;\n        return;\n      }\n\n      var instance = openDialogs[openDialogs.length - 1];\n      var keyCode = event.keyCode;\n\n      if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\n        triggerClose(instance);\n        return false;\n      } else if (usedKeys.indexOf(keyCode) > -1) {\n        triggerCallback(instance, function (button) {\n          return button.key === keyCode;\n        });\n        return false;\n      }\n    }\n    /**\r\n    * Keydown event handler, attached to the document.body\r\n    *\r\n    * @param {Event}\t\tDOM event object.\r\n    * @param {Object}\t\tThe dilog instance.\r\n    * \r\n    * @return {undefined}\r\n    */\n\n\n    function keydownHandler(event) {\n      var instance = openDialogs[openDialogs.length - 1];\n      var keyCode = event.keyCode;\n\n      if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\n        var buttons = instance.__internal.buttons;\n\n        for (var x = 0; x < buttons.length; x += 1) {\n          if (document.activeElement === buttons[x].element) {\n            switch (keyCode) {\n              case keys.LEFT:\n                buttons[(x || buttons.length) - 1].element.focus();\n                return;\n\n              case keys.RIGHT:\n                buttons[(x + 1) % buttons.length].element.focus();\n                return;\n            }\n          }\n        }\n      } else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\n        event.preventDefault();\n        event.stopPropagation();\n        triggerCallback(instance, function (button) {\n          return button.key === keyCode;\n        });\n        return false;\n      }\n    }\n    /**\r\n     * Sets focus to proper dialog element\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function setFocus(instance, resetTarget) {\n      // reset target has already been determined.\n      if (resetTarget) {\n        resetTarget.focus();\n      } else {\n        // current instance focus settings\n        var focus = instance.__internal.focus; // the focus element.\n\n        var element = focus.element;\n\n        switch (typeof focus.element) {\n          // a number means a button index\n          case 'number':\n            if (instance.__internal.buttons.length > focus.element) {\n              //in basic view, skip focusing the buttons.\n              if (instance.get('basic') === true) {\n                element = instance.elements.reset[0];\n              } else {\n                element = instance.__internal.buttons[focus.element].element;\n              }\n            }\n\n            break;\n          // a string means querySelector to select from dialog body contents.\n\n          case 'string':\n            element = instance.elements.body.querySelector(focus.element);\n            break;\n          // a function should return the focus element.\n\n          case 'function':\n            element = focus.element.call(instance);\n            break;\n        } // if no focus element, default to first reset element.\n\n\n        if (instance.get('defaultFocusOff') === true || (typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0) {\n          element = instance.elements.reset[0];\n        } // focus\n\n\n        if (element && element.focus) {\n          element.focus(); // if selectable\n\n          if (focus.select && element.select) {\n            element.select();\n          }\n        }\n      }\n    }\n    /**\r\n     * Focus event handler, attached to document.body and dialogs own reset links.\r\n     * handles the focus for modal dialogs only.\r\n     *\r\n     * @param {Event} event DOM focus event object.\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function onReset(event, instance) {\n      // should work on last modal if triggered from document.body \n      if (!instance) {\n        for (var x = openDialogs.length - 1; x > -1; x -= 1) {\n          if (openDialogs[x].isModal()) {\n            instance = openDialogs[x];\n            break;\n          }\n        }\n      }\n\n      if (instance) {\n        // if modal\n        if (instance.isModal()) {\n          // determine reset target to enable forward/backward tab cycle.\n          var firstReset = instance.elements.reset[0],\n              lastReset = instance.elements.reset[1],\n              lastFocusedElement = event.relatedTarget,\n              within = instance.elements.root.contains(lastFocusedElement),\n              target = event.srcElement || event.target,\n              resetTarget; //if the previous focused element element was outside the modal do nthing\n\n          if (\n          /*first show */\n          target === firstReset && !within ||\n          /*focus cycle */\n          target === lastReset && lastFocusedElement == firstReset) return;else if (target === lastReset || target === document.body) resetTarget = firstReset;else if (target === firstReset && lastFocusedElement == lastReset) {\n            resetTarget = findTabbable(instance);\n          } else if (target == firstReset && within) {\n            resetTarget = findTabbable(instance, true);\n          } // focus\n\n          setFocus(instance, resetTarget);\n        }\n      }\n    }\n\n    function findTabbable(instance, last) {\n      var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\n      last && tabbables.reverse();\n\n      for (var x = 0; x < tabbables.length; x++) {\n        var tabbable = tabbables[x]; //check if visible\n\n        if (!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)) {\n          return tabbable;\n        }\n      }\n    }\n\n    function recycleTab(event) {\n      var instance = openDialogs[openDialogs.length - 1];\n\n      if (instance && event.shiftKey && event.keyCode === keys.TAB) {\n        instance.elements.reset[1].focus();\n      }\n    }\n    /**\r\n     * Transition in transitionend event handler. \r\n     *\r\n     * @param {Event}\t\tTransitionEnd event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function handleTransitionInEvent(event, instance) {\n      // clear the timer\n      clearTimeout(instance.__internal.timerIn); // once transition is complete, set focus\n\n      setFocus(instance); //restore scroll to prevent document jump\n\n      restoreScrollPosition(); // allow handling key up after transition ended.\n\n      cancelKeyup = false; // allow custom `onfocus` method\n\n      dispatchEvent('onfocus', instance); // unbind the event\n\n      off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\n      removeClass(instance.elements.root, classes.animationIn);\n    }\n    /**\r\n     * Transition out transitionend event handler. \r\n     *\r\n     * @param {Event}\t\tTransitionEnd event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function handleTransitionOutEvent(event, instance) {\n      // clear the timer\n      clearTimeout(instance.__internal.timerOut); // unbind the event\n\n      off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler); // reset move updates\n\n      resetMove(instance); // reset resize updates\n\n      resetResize(instance); // restore if maximized\n\n      if (instance.isMaximized() && !instance.get('startMaximized')) {\n        restore(instance);\n      } // return focus to the last active element\n\n\n      if (alertify.defaults.maintainFocus && instance.__internal.activeElement) {\n        instance.__internal.activeElement.focus();\n\n        instance.__internal.activeElement = null;\n      } //destory the instance\n\n\n      if (typeof instance.__internal.destroy === 'function') {\n        instance.__internal.destroy.apply(instance);\n      }\n    }\n    /* Controls moving a dialog around */\n    //holde the current moving instance\n\n\n    var movable = null,\n        //holds the current X offset when move starts\n    offsetX = 0,\n        //holds the current Y offset when move starts\n    offsetY = 0,\n        xProp = 'pageX',\n        yProp = 'pageY',\n        bounds = null,\n        refreshTop = false,\n        moveDelegate = null;\n    /**\r\n     * Helper: sets the element top/left coordinates\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Node} element The element being moved.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n    function moveElement(event, element) {\n      var left = event[xProp] - offsetX,\n          top = event[yProp] - offsetY;\n\n      if (refreshTop) {\n        top -= document.body.scrollTop;\n      }\n\n      element.style.left = left + 'px';\n      element.style.top = top + 'px';\n    }\n    /**\r\n     * Helper: sets the element top/left coordinates within screen bounds\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Node} element The element being moved.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function moveElementBounded(event, element) {\n      var left = event[xProp] - offsetX,\n          top = event[yProp] - offsetY;\n\n      if (refreshTop) {\n        top -= document.body.scrollTop;\n      }\n\n      element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\n\n      if (refreshTop) {\n        element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\n      } else {\n        element.style.top = Math.max(bounds.minTop, top) + 'px';\n      }\n    }\n    /**\r\n     * Triggers the start of a move event, attached to the header element mouse down event.\r\n     * Adds no-selection class to the body, disabling selection while moving.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     * \r\n     * @return {Boolean} false\r\n     */\n\n\n    function beginMove(event, instance) {\n      if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\n        var eventSrc,\n            left = 0,\n            top = 0;\n\n        if (event.type === 'touchstart') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n          xProp = 'clientX';\n          yProp = 'clientY';\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n\n        if (eventSrc) {\n          var element = instance.elements.dialog;\n          addClass(element, classes.capture);\n\n          if (element.style.left) {\n            left = parseInt(element.style.left, 10);\n          }\n\n          if (element.style.top) {\n            top = parseInt(element.style.top, 10);\n          }\n\n          offsetX = eventSrc[xProp] - left;\n          offsetY = eventSrc[yProp] - top;\n\n          if (instance.isModal()) {\n            offsetY += instance.elements.modal.scrollTop;\n          } else if (instance.isPinned()) {\n            offsetY -= document.body.scrollTop;\n          }\n\n          if (instance.get('moveBounded')) {\n            var current = element,\n                offsetLeft = -left,\n                offsetTop = -top; //calc offset\n\n            do {\n              offsetLeft += current.offsetLeft;\n              offsetTop += current.offsetTop;\n            } while (current = current.offsetParent);\n\n            bounds = {\n              maxLeft: offsetLeft,\n              minLeft: -offsetLeft,\n              maxTop: document.documentElement.clientHeight - element.clientHeight - offsetTop,\n              minTop: -offsetTop\n            };\n            moveDelegate = moveElementBounded;\n          } else {\n            bounds = null;\n            moveDelegate = moveElement;\n          } // allow custom `onmove` method\n\n\n          dispatchEvent('onmove', instance);\n          refreshTop = !instance.isModal() && instance.isPinned();\n          movable = instance;\n          moveDelegate(eventSrc, element);\n          addClass(document.body, classes.noSelection);\n          return false;\n        }\n      }\n    }\n    /**\r\n     * The actual move handler,  attached to document.body mousemove event.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function move(event) {\n      if (movable) {\n        var eventSrc;\n\n        if (event.type === 'touchmove') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n\n        if (eventSrc) {\n          moveDelegate(eventSrc, movable.elements.dialog);\n        }\n      }\n    }\n    /**\r\n     * Triggers the end of a move event,  attached to document.body mouseup event.\r\n     * Removes no-selection class from document.body, allowing selection.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function endMove() {\n      if (movable) {\n        var instance = movable;\n        movable = bounds = null;\n        removeClass(document.body, classes.noSelection);\n        removeClass(instance.elements.dialog, classes.capture); // allow custom `onmoved` method\n\n        dispatchEvent('onmoved', instance);\n      }\n    }\n    /**\r\n     * Resets any changes made by moving the element to its original state,\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function resetMove(instance) {\n      movable = null;\n      var element = instance.elements.dialog;\n      element.style.left = element.style.top = '';\n    }\n    /**\r\n     * Updates the dialog move behavior.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updateMovable(instance) {\n      if (instance.get('movable')) {\n        // add class\n        addClass(instance.elements.root, classes.movable);\n\n        if (instance.isOpen()) {\n          bindMovableEvents(instance);\n        }\n      } else {\n        //reset\n        resetMove(instance); // remove class\n\n        removeClass(instance.elements.root, classes.movable);\n\n        if (instance.isOpen()) {\n          unbindMovableEvents(instance);\n        }\n      }\n    }\n    /* Controls moving a dialog around */\n    //holde the current instance being resized\t\t\n\n\n    var resizable = null,\n        //holds the staring left offset when resize starts.\n    startingLeft = Number.Nan,\n        //holds the staring width when resize starts.\n    startingWidth = 0,\n        //holds the initial width when resized for the first time.\n    minWidth = 0,\n        //holds the offset of the resize handle.\n    handleOffset = 0;\n    /**\r\n     * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n     *\r\n     * @param {Event} event\tDOM mousemove event object.\r\n     * @param {Node} element The element being moved.\r\n     * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n    function resizeElement(event, element, pageRelative) {\n      //calculate offsets from 0,0\n      var current = element;\n      var offsetLeft = 0;\n      var offsetTop = 0;\n\n      do {\n        offsetLeft += current.offsetLeft;\n        offsetTop += current.offsetTop;\n      } while (current = current.offsetParent); // determine X,Y coordinates.\n\n\n      var X, Y;\n\n      if (pageRelative === true) {\n        X = event.pageX;\n        Y = event.pageY;\n      } else {\n        X = event.clientX;\n        Y = event.clientY;\n      } // rtl handling\n\n\n      var isRTL = isRightToLeft();\n\n      if (isRTL) {\n        // reverse X \n        X = document.body.offsetWidth - X; // if has a starting left, calculate offsetRight\n\n        if (!isNaN(startingLeft)) {\n          offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\n        }\n      } // set width/height\n\n\n      element.style.height = Y - offsetTop + handleOffset + 'px';\n      element.style.width = X - offsetLeft + handleOffset + 'px'; // if the element being resized has a starting left, maintain it.\n      // the dialog is centered, divide by half the offset to maintain the margins.\n\n      if (!isNaN(startingLeft)) {\n        var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\n\n        if (isRTL) {\n          //negate the diff, why?\n          //when growing it should decrease left\n          //when shrinking it should increase left\n          diff *= -1;\n        }\n\n        if (element.offsetWidth > startingWidth) {\n          //growing\n          element.style.left = startingLeft + diff + 'px';\n        } else if (element.offsetWidth >= minWidth) {\n          //shrinking\n          element.style.left = startingLeft - diff + 'px';\n        }\n      }\n    }\n    /**\r\n     * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n     * Adds no-selection class to the body, disabling selection while moving.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     * \r\n     * @return {Boolean} false\r\n     */\n\n\n    function beginResize(event, instance) {\n      if (!instance.isMaximized()) {\n        var eventSrc;\n\n        if (event.type === 'touchstart') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n\n        if (eventSrc) {\n          // allow custom `onresize` method\n          dispatchEvent('onresize', instance);\n          resizable = instance;\n          handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\n          var element = instance.elements.dialog;\n          addClass(element, classes.capture);\n          startingLeft = parseInt(element.style.left, 10);\n          element.style.height = element.offsetHeight + 'px';\n          element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\n          element.style.width = (startingWidth = element.offsetWidth) + 'px';\n\n          if (element.style.maxWidth !== 'none') {\n            element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\n          }\n\n          element.style.maxWidth = 'none';\n          addClass(document.body, classes.noSelection);\n          return false;\n        }\n      }\n    }\n    /**\r\n     * The actual resize handler,  attached to document.body mousemove event.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * \r\n     * @return {undefined}\r\n     */\n\n\n    function resize(event) {\n      if (resizable) {\n        var eventSrc;\n\n        if (event.type === 'touchmove') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n\n        if (eventSrc) {\n          resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\n        }\n      }\n    }\n    /**\r\n     * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n     * Removes no-selection class from document.body, allowing selection.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function endResize() {\n      if (resizable) {\n        var instance = resizable;\n        resizable = null;\n        removeClass(document.body, classes.noSelection);\n        removeClass(instance.elements.dialog, classes.capture);\n        cancelClick = true; // allow custom `onresized` method\n\n        dispatchEvent('onresized', instance);\n      }\n    }\n    /**\r\n     * Resets any changes made by resizing the element to its original state.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function resetResize(instance) {\n      resizable = null;\n      var element = instance.elements.dialog;\n\n      if (element.style.maxWidth === 'none') {\n        //clear inline styles.\n        element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = ''; //reset variables.\n\n        startingLeft = Number.Nan;\n        startingWidth = minWidth = handleOffset = 0;\n      }\n    }\n    /**\r\n     * Updates the dialog move behavior.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function updateResizable(instance) {\n      if (instance.get('resizable')) {\n        // add class\n        addClass(instance.elements.root, classes.resizable);\n\n        if (instance.isOpen()) {\n          bindResizableEvents(instance);\n        }\n      } else {\n        //reset\n        resetResize(instance); // remove class\n\n        removeClass(instance.elements.root, classes.resizable);\n\n        if (instance.isOpen()) {\n          unbindResizableEvents(instance);\n        }\n      }\n    }\n    /**\r\n     * Reset move/resize on window resize.\r\n     *\r\n     * @param {Event} event\twindow resize event object.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function windowResize()\n    /*event*/\n    {\n      for (var x = 0; x < openDialogs.length; x += 1) {\n        var instance = openDialogs[x];\n\n        if (instance.get('autoReset')) {\n          resetMove(instance);\n          resetResize(instance);\n        }\n      }\n    }\n    /**\r\n     * Bind dialogs events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function bindEvents(instance) {\n      // if first dialog, hook global handlers\n      if (openDialogs.length === 1) {\n        //global\n        on(window, 'resize', windowResize);\n        on(document.body, 'keyup', keyupHandler);\n        on(document.body, 'keydown', keydownHandler);\n        on(document.body, 'focus', onReset); //move\n\n        on(document.documentElement, 'mousemove', move);\n        on(document.documentElement, 'touchmove', move);\n        on(document.documentElement, 'mouseup', endMove);\n        on(document.documentElement, 'touchend', endMove); //resize\n\n        on(document.documentElement, 'mousemove', resize);\n        on(document.documentElement, 'touchmove', resize);\n        on(document.documentElement, 'mouseup', endResize);\n        on(document.documentElement, 'touchend', endResize);\n      } // common events\n\n\n      on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\n      on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\n      on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\n      on(instance.elements.reset[0], 'keydown', recycleTab);\n      on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler); //prevent handling key up when dialog is being opened by a key stroke.\n\n      cancelKeyup = true; // hook in transition handler\n\n      on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler); // modelss only events\n\n      if (!instance.get('modal')) {\n        bindModelessEvents(instance);\n      } // resizable\n\n\n      if (instance.get('resizable')) {\n        bindResizableEvents(instance);\n      } // movable\n\n\n      if (instance.get('movable')) {\n        bindMovableEvents(instance);\n      }\n    }\n    /**\r\n     * Unbind dialogs events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function unbindEvents(instance) {\n      // if last dialog, remove global handlers\n      if (openDialogs.length === 1) {\n        //global\n        off(window, 'resize', windowResize);\n        off(document.body, 'keyup', keyupHandler);\n        off(document.body, 'keydown', keydownHandler);\n        off(document.body, 'focus', onReset); //move\n\n        off(document.documentElement, 'mousemove', move);\n        off(document.documentElement, 'mouseup', endMove); //resize\n\n        off(document.documentElement, 'mousemove', resize);\n        off(document.documentElement, 'mouseup', endResize);\n      } // common events\n\n\n      off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\n      off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\n      off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\n      off(instance.elements.reset[0], 'keydown', recycleTab);\n      off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler); // hook out transition handler\n\n      on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler); // modelss only events\n\n      if (!instance.get('modal')) {\n        unbindModelessEvents(instance);\n      } // movable\n\n\n      if (instance.get('movable')) {\n        unbindMovableEvents(instance);\n      } // resizable\n\n\n      if (instance.get('resizable')) {\n        unbindResizableEvents(instance);\n      }\n    }\n    /**\r\n     * Bind modeless specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function bindModelessEvents(instance) {\n      on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\n    }\n    /**\r\n     * Unbind modeless specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function unbindModelessEvents(instance) {\n      off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\n    }\n    /**\r\n     * Bind movable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function bindMovableEvents(instance) {\n      on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\n      on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);\n    }\n    /**\r\n     * Unbind movable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function unbindMovableEvents(instance) {\n      off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\n      off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);\n    }\n    /**\r\n     * Bind resizable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function bindResizableEvents(instance) {\n      on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\n      on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);\n    }\n    /**\r\n     * Unbind resizable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function unbindResizableEvents(instance) {\n      off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\n      off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);\n    }\n    /**\r\n     * Bind closable events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function bindClosableEvents(instance) {\n      on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\n    }\n    /**\r\n     * Unbind closable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n\n\n    function unbindClosableEvents(instance) {\n      off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\n    } // dialog API\n\n\n    return {\n      __init: initialize,\n\n      /**\r\n       * Check if dialog is currently open\r\n       *\r\n       * @return {Boolean}\r\n       */\n      isOpen: function () {\n        return this.__internal.isOpen;\n      },\n      isModal: function () {\n        return this.elements.root.className.indexOf(classes.modeless) < 0;\n      },\n      isMaximized: function () {\n        return this.elements.root.className.indexOf(classes.maximized) > -1;\n      },\n      isPinned: function () {\n        return this.elements.root.className.indexOf(classes.unpinned) < 0;\n      },\n      maximize: function () {\n        if (!this.isMaximized()) {\n          maximize(this);\n        }\n\n        return this;\n      },\n      restore: function () {\n        if (this.isMaximized()) {\n          restore(this);\n        }\n\n        return this;\n      },\n      pin: function () {\n        if (!this.isPinned()) {\n          pin(this);\n        }\n\n        return this;\n      },\n      unpin: function () {\n        if (this.isPinned()) {\n          unpin(this);\n        }\n\n        return this;\n      },\n      bringToFront: function () {\n        bringToFront(null, this);\n        return this;\n      },\n\n      /**\r\n       * Move the dialog to a specific x/y coordinates\r\n       *\r\n       * @param {Number} x    The new dialog x coordinate in pixels.\r\n       * @param {Number} y    The new dialog y coordinate in pixels.\r\n       *\r\n       * @return {Object} The dialog instance.\r\n       */\n      moveTo: function (x, y) {\n        if (!isNaN(x) && !isNaN(y)) {\n          // allow custom `onmove` method\n          dispatchEvent('onmove', this);\n          var element = this.elements.dialog,\n              current = element,\n              offsetLeft = 0,\n              offsetTop = 0; //subtract existing left,top\n\n          if (element.style.left) {\n            offsetLeft -= parseInt(element.style.left, 10);\n          }\n\n          if (element.style.top) {\n            offsetTop -= parseInt(element.style.top, 10);\n          } //calc offset\n\n\n          do {\n            offsetLeft += current.offsetLeft;\n            offsetTop += current.offsetTop;\n          } while (current = current.offsetParent); //calc left, top\n\n\n          var left = x - offsetLeft;\n          var top = y - offsetTop; //// rtl handling\n\n          if (isRightToLeft()) {\n            left *= -1;\n          }\n\n          element.style.left = left + 'px';\n          element.style.top = top + 'px'; // allow custom `onmoved` method\n\n          dispatchEvent('onmoved', this);\n        }\n\n        return this;\n      },\n\n      /**\r\n       * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n       * The dialog can be resized to:\r\n       *  A minimum width equal to the initial display width\r\n       *  A minimum height equal to the sum of header/footer heights.\r\n       *\r\n       *\r\n       * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n       * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n       *\r\n       * @return {Object} The dialog instance.\r\n       */\n      resizeTo: function (width, height) {\n        var w = parseFloat(width),\n            h = parseFloat(height),\n            regex = /(\\d*\\.\\d+|\\d+)%/;\n\n        if (!isNaN(w) && !isNaN(h) && this.get('resizable') === true) {\n          // allow custom `onresize` method\n          dispatchEvent('onresize', this);\n\n          if (('' + width).match(regex)) {\n            w = w / 100 * document.documentElement.clientWidth;\n          }\n\n          if (('' + height).match(regex)) {\n            h = h / 100 * document.documentElement.clientHeight;\n          }\n\n          var element = this.elements.dialog;\n\n          if (element.style.maxWidth !== 'none') {\n            element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\n          }\n\n          element.style.maxWidth = 'none';\n          element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\n          element.style.width = w + 'px';\n          element.style.height = h + 'px'; // allow custom `onresized` method\n\n          dispatchEvent('onresized', this);\n        }\n\n        return this;\n      },\n\n      /**\r\n       * Gets or Sets dialog settings/options \r\n       *\r\n       * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n       * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n       *\r\n       * @return {undefined}\r\n       */\n      setting: function (key, value) {\n        var self = this;\n        var result = update(this, this.__internal.options, function (k, o, n) {\n          optionUpdated(self, k, o, n);\n        }, key, value);\n\n        if (result.op === 'get') {\n          if (result.found) {\n            return result.value;\n          } else if (typeof this.settings !== 'undefined') {\n            return update(this, this.settings, this.settingUpdated || function () {}, key, value).value;\n          } else {\n            return undefined;\n          }\n        } else if (result.op === 'set') {\n          if (result.items.length > 0) {\n            var callback = this.settingUpdated || function () {};\n\n            for (var x = 0; x < result.items.length; x += 1) {\n              var item = result.items[x];\n\n              if (!item.found && typeof this.settings !== 'undefined') {\n                update(this, this.settings, callback, item.key, item.value);\n              }\n            }\n          }\n\n          return this;\n        }\n      },\n\n      /**\r\n       * [Alias] Sets dialog settings/options \r\n       */\n      set: function (key, value) {\n        this.setting(key, value);\n        return this;\n      },\n\n      /**\r\n       * [Alias] Gets dialog settings/options \r\n       */\n      get: function (key) {\n        return this.setting(key);\n      },\n\n      /**\r\n      * Sets dialog header\r\n      * @content {string or element}\r\n      *\r\n      * @return {undefined}\r\n      */\n      setHeader: function (content) {\n        if (typeof content === 'string') {\n          clearContents(this.elements.header);\n          this.elements.header.innerHTML = content;\n        } else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content) {\n          clearContents(this.elements.header);\n          this.elements.header.appendChild(content);\n        }\n\n        return this;\n      },\n\n      /**\r\n      * Sets dialog contents\r\n      * @content {string or element}\r\n      *\r\n      * @return {undefined}\r\n      */\n      setContent: function (content) {\n        if (typeof content === 'string') {\n          clearContents(this.elements.content);\n          this.elements.content.innerHTML = content;\n        } else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content) {\n          clearContents(this.elements.content);\n          this.elements.content.appendChild(content);\n        }\n\n        return this;\n      },\n\n      /**\r\n       * Show the dialog as modal\r\n       *\r\n       * @return {Object} the dialog instance.\r\n       */\n      showModal: function (className) {\n        return this.show(true, className);\n      },\n\n      /**\r\n       * Show the dialog\r\n       *\r\n       * @return {Object} the dialog instance.\r\n       */\n      show: function (modal, className) {\n        // ensure initialization\n        initialize(this);\n\n        if (!this.__internal.isOpen) {\n          // add to open dialogs\n          this.__internal.isOpen = true;\n          openDialogs.push(this); // save last focused element\n\n          if (alertify.defaults.maintainFocus) {\n            this.__internal.activeElement = document.activeElement;\n          } // set tabindex attribute on body element this allows script to give it focusable\n\n\n          if (!document.body.hasAttribute('tabindex')) {\n            document.body.setAttribute('tabindex', tabindex = '0');\n          } //allow custom dom manipulation updates before showing the dialog.\n\n\n          if (typeof this.prepare === 'function') {\n            this.prepare();\n          }\n\n          bindEvents(this);\n\n          if (modal !== undefined) {\n            this.set('modal', modal);\n          } //save scroll to prevent document jump\n\n\n          saveScrollPosition();\n          ensureNoOverflow(); // allow custom dialog class on show\n\n          if (typeof className === 'string' && className !== '') {\n            this.__internal.className = className;\n            addClass(this.elements.root, className);\n          } // maximize if start maximized\n\n\n          if (this.get('startMaximized')) {\n            this.maximize();\n          } else if (this.isMaximized()) {\n            restore(this);\n          }\n\n          updateAbsPositionFix(this);\n          this.elements.root.removeAttribute('style');\n          removeClass(this.elements.root, classes.animationOut);\n          addClass(this.elements.root, classes.animationIn); // set 1s fallback in case transition event doesn't fire\n\n          clearTimeout(this.__internal.timerIn);\n          this.__internal.timerIn = setTimeout(this.__internal.transitionInHandler, transition.supported ? 1000 : 100);\n\n          if (isSafari) {\n            // force desktop safari reflow\n            var root = this.elements.root;\n            root.style.display = 'none';\n            setTimeout(function () {\n              root.style.display = 'block';\n            }, 0);\n          } //reflow\n\n\n          reflow = this.elements.root.offsetWidth; // show dialog\n\n          removeClass(this.elements.root, classes.hidden); // internal on show event\n\n          if (typeof this.hooks.onshow === 'function') {\n            this.hooks.onshow.call(this);\n          } // allow custom `onshow` method\n\n\n          dispatchEvent('onshow', this);\n        } else {\n          // reset move updates\n          resetMove(this); // reset resize updates\n\n          resetResize(this); // shake the dialog to indicate its already open\n\n          addClass(this.elements.dialog, classes.shake);\n          var self = this;\n          setTimeout(function () {\n            removeClass(self.elements.dialog, classes.shake);\n          }, 200);\n        }\n\n        return this;\n      },\n\n      /**\r\n       * Close the dialog\r\n       *\r\n       * @return {Object} The dialog instance\r\n       */\n      close: function () {\n        if (this.__internal.isOpen) {\n          // custom `onclosing` event\n          if (dispatchEvent('onclosing', this) !== false) {\n            unbindEvents(this);\n            removeClass(this.elements.root, classes.animationIn);\n            addClass(this.elements.root, classes.animationOut); // set 1s fallback in case transition event doesn't fire\n\n            clearTimeout(this.__internal.timerOut);\n            this.__internal.timerOut = setTimeout(this.__internal.transitionOutHandler, transition.supported ? 1000 : 100); // hide dialog\n\n            addClass(this.elements.root, classes.hidden); //reflow\n\n            reflow = this.elements.modal.offsetWidth; // remove custom dialog class on hide\n\n            if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\n              removeClass(this.elements.root, this.__internal.className);\n            } // internal on close event\n\n\n            if (typeof this.hooks.onclose === 'function') {\n              this.hooks.onclose.call(this);\n            } // allow custom `onclose` method\n\n\n            dispatchEvent('onclose', this); //remove from open dialogs\n\n            openDialogs.splice(openDialogs.indexOf(this), 1);\n            this.__internal.isOpen = false;\n            ensureNoOverflow();\n          }\n        } // last dialog and tab index was set by us, remove it.\n\n\n        if (!openDialogs.length && tabindex === '0') {\n          document.body.removeAttribute('tabindex');\n        }\n\n        return this;\n      },\n\n      /**\r\n       * Close all open dialogs except this.\r\n       *\r\n       * @return {undefined}\r\n       */\n      closeOthers: function () {\n        alertify.closeAll(this);\n        return this;\n      },\n\n      /**\r\n       * Destroys this dialog instance\r\n       *\r\n       * @return {undefined}\r\n       */\n      destroy: function () {\n        if (this.__internal) {\n          if (this.__internal.isOpen) {\n            //mark dialog for destruction, this will be called on tranistionOut event.\n            this.__internal.destroy = function () {\n              destruct(this, initialize);\n            }; //close the dialog to unbind all events.\n\n\n            this.close();\n          } else if (!this.__internal.destroy) {\n            destruct(this, initialize);\n          }\n        }\n\n        return this;\n      }\n    };\n  }();\n\n  var notifier = function () {\n    var reflow,\n        element,\n        openInstances = [],\n        classes = defaults.notifier.classes;\n    /**\r\n     * Helper: initializes the notifier instance\r\n     *\r\n     */\n\n    function initialize(instance) {\n      if (!instance.__internal) {\n        instance.__internal = {\n          position: alertify.defaults.notifier.position,\n          delay: alertify.defaults.notifier.delay\n        };\n        element = document.createElement('DIV');\n        updatePosition(instance);\n      } //add to DOM tree.\n\n\n      if (element.parentNode !== document.body) {\n        document.body.appendChild(element);\n      }\n    }\n\n    function pushInstance(instance) {\n      instance.__internal.pushed = true;\n      openInstances.push(instance);\n    }\n\n    function popInstance(instance) {\n      openInstances.splice(openInstances.indexOf(instance), 1);\n      instance.__internal.pushed = false;\n    }\n    /**\r\n     * Helper: update the notifier instance position\r\n     *\r\n     */\n\n\n    function updatePosition(instance) {\n      element.className = classes.base;\n\n      switch (instance.__internal.position) {\n        case 'top-right':\n          addClass(element, classes.top + ' ' + classes.right);\n          break;\n\n        case 'top-left':\n          addClass(element, classes.top + ' ' + classes.left);\n          break;\n\n        case 'top-center':\n          addClass(element, classes.top + ' ' + classes.center);\n          break;\n\n        case 'bottom-left':\n          addClass(element, classes.bottom + ' ' + classes.left);\n          break;\n\n        case 'bottom-center':\n          addClass(element, classes.bottom + ' ' + classes.center);\n          break;\n\n        default:\n        case 'bottom-right':\n          addClass(element, classes.bottom + ' ' + classes.right);\n          break;\n      }\n    }\n    /**\r\n    * creates a new notification message\r\n    *\r\n    * @param  {DOMElement} message\tThe notifier message element\r\n    * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n    * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n    *\r\n    * @return {undefined}\r\n    */\n\n\n    function create(div, callback) {\n      function clickDelegate(event, instance) {\n        if (!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true') {\n          instance.dismiss(true);\n        }\n      }\n\n      function transitionDone(event, instance) {\n        // unbind event\n        off(instance.element, transition.type, transitionDone); // remove the message\n\n        element.removeChild(instance.element);\n      }\n\n      function initialize(instance) {\n        if (!instance.__internal) {\n          instance.__internal = {\n            pushed: false,\n            delay: undefined,\n            timer: undefined,\n            clickHandler: undefined,\n            transitionEndHandler: undefined,\n            transitionTimeout: undefined\n          };\n          instance.__internal.clickHandler = delegate(instance, clickDelegate);\n          instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\n        }\n\n        return instance;\n      }\n\n      function clearTimers(instance) {\n        clearTimeout(instance.__internal.timer);\n        clearTimeout(instance.__internal.transitionTimeout);\n      }\n\n      return initialize({\n        /* notification DOM element*/\n        element: div,\n\n        /*\r\n         * Pushes a notification message\r\n         * @param {string or DOMElement} content The notification message content\r\n         * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n         *\r\n         */\n        push: function (_content, _wait) {\n          if (!this.__internal.pushed) {\n            pushInstance(this);\n            clearTimers(this);\n            var content, wait;\n\n            switch (arguments.length) {\n              case 0:\n                wait = this.__internal.delay;\n                break;\n\n              case 1:\n                if (typeof _content === 'number') {\n                  wait = _content;\n                } else {\n                  content = _content;\n                  wait = this.__internal.delay;\n                }\n\n                break;\n\n              case 2:\n                content = _content;\n                wait = _wait;\n                break;\n            }\n\n            this.__internal.closeButton = alertify.defaults.notifier.closeButton; // set contents\n\n            if (typeof content !== 'undefined') {\n              this.setContent(content);\n            } // append or insert\n\n\n            if (notifier.__internal.position.indexOf('top') < 0) {\n              element.appendChild(this.element);\n            } else {\n              element.insertBefore(this.element, element.firstChild);\n            }\n\n            reflow = this.element.offsetWidth;\n            addClass(this.element, classes.visible); // attach click event\n\n            on(this.element, 'click', this.__internal.clickHandler);\n            return this.delay(wait);\n          }\n\n          return this;\n        },\n\n        /*\r\n         * {Function} callback function to be invoked before dismissing the notification message.\r\n         * Remarks: A return value === 'false' will cancel the dismissal\r\n         *\r\n         */\n        ondismiss: function () {},\n\n        /*\r\n         * {Function} callback function to be invoked when the message is dismissed.\r\n         *\r\n         */\n        callback: callback,\n\n        /*\r\n         * Dismisses the notification message\r\n         * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n         *\r\n         */\n        dismiss: function (clicked) {\n          if (this.__internal.pushed) {\n            clearTimers(this);\n\n            if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\n              //detach click event\n              off(this.element, 'click', this.__internal.clickHandler); // ensure element exists\n\n              if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\n                //transition end or fallback\n                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\n                removeClass(this.element, classes.visible); // custom callback on dismiss\n\n                if (typeof this.callback === 'function') {\n                  this.callback.call(this, clicked);\n                }\n              }\n\n              popInstance(this);\n            }\n          }\n\n          return this;\n        },\n\n        /*\r\n         * Delays the notification message dismissal\r\n         * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n         *\r\n         */\n        delay: function (wait) {\n          clearTimers(this);\n          this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\n\n          if (this.__internal.delay > 0) {\n            var self = this;\n            this.__internal.timer = setTimeout(function () {\n              self.dismiss();\n            }, this.__internal.delay * 1000);\n          }\n\n          return this;\n        },\n\n        /*\r\n         * Sets the notification message contents\r\n         * @param {string or DOMElement} content The notification message content\r\n         *\r\n         */\n        setContent: function (content) {\n          if (typeof content === 'string') {\n            clearContents(this.element);\n            this.element.innerHTML = content;\n          } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\n            clearContents(this.element);\n            this.element.appendChild(content);\n          }\n\n          if (this.__internal.closeButton) {\n            var close = document.createElement('span');\n            addClass(close, classes.close);\n            close.setAttribute('data-close', true);\n            this.element.appendChild(close);\n          }\n\n          return this;\n        },\n\n        /*\r\n         * Dismisses all open notifications except this.\r\n         *\r\n         */\n        dismissOthers: function () {\n          notifier.dismissAll(this);\n          return this;\n        }\n      });\n    } //notifier api\n\n\n    return {\n      /**\r\n       * Gets or Sets notifier settings.\r\n       *\r\n       * @param {string} key The setting name\r\n       * @param {Variant} value The setting value.\r\n       *\r\n       * @return {Object}\tif the called as a setter, return the notifier instance.\r\n       */\n      setting: function (key, value) {\n        //ensure init\n        initialize(this);\n\n        if (typeof value === 'undefined') {\n          //get\n          return this.__internal[key];\n        } else {\n          //set\n          switch (key) {\n            case 'position':\n              this.__internal.position = value;\n              updatePosition(this);\n              break;\n\n            case 'delay':\n              this.__internal.delay = value;\n              break;\n          }\n        }\n\n        return this;\n      },\n\n      /**\r\n       * [Alias] Sets dialog settings/options\r\n       */\n      set: function (key, value) {\n        this.setting(key, value);\n        return this;\n      },\n\n      /**\r\n       * [Alias] Gets dialog settings/options\r\n       */\n      get: function (key) {\n        return this.setting(key);\n      },\n\n      /**\r\n       * Creates a new notification message\r\n       *\r\n       * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n       * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n       *\r\n       * @return {undefined}\r\n       */\n      create: function (type, callback) {\n        //ensure notifier init\n        initialize(this); //create new notification message\n\n        var div = document.createElement('div');\n        div.className = classes.message + (typeof type === 'string' && type !== '' ? ' ' + classes.prefix + type : '');\n        return create(div, callback);\n      },\n\n      /**\r\n       * Dismisses all open notifications.\r\n       *\r\n       * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n       *\r\n       */\n      dismissAll: function (except) {\n        var clone = openInstances.slice(0);\n\n        for (var x = 0; x < clone.length; x += 1) {\n          var instance = clone[x];\n\n          if (except === undefined || except !== instance) {\n            instance.dismiss();\n          }\n        }\n      }\n    };\n  }();\n  /**\r\n   * Alertify public API\r\n   * This contains everything that is exposed through the alertify object.\r\n   *\r\n   * @return {Object}\r\n   */\n\n\n  function Alertify() {\n    // holds a references of created dialogs\n    var dialogs = {};\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\n\n    function extend(sub, base) {\n      // copy dialog pototype over definition.\n      for (var prop in base) {\n        if (base.hasOwnProperty(prop)) {\n          sub[prop] = base[prop];\n        }\n      }\n\n      return sub;\n    }\n    /**\r\n    * Helper: returns a dialog instance from saved dialogs.\r\n    * and initializes the dialog if its not already initialized.\r\n    *\r\n    * @name {String} name The dialog name.\r\n    *\r\n    * @return {Object} The dialog instance.\r\n    */\n\n\n    function get_dialog(name) {\n      var dialog = dialogs[name].dialog; //initialize the dialog if its not already initialized.\n\n      if (dialog && typeof dialog.__init === 'function') {\n        dialog.__init(dialog);\n      }\n\n      return dialog;\n    }\n    /**\r\n     * Helper:  registers a new dialog definition.\r\n     *\r\n     * @name {String} name The dialog name.\r\n     * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n     * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n     * @base {String} base the name of another dialog to inherit from.\r\n     *\r\n     * @return {Object} The dialog definition.\r\n     */\n\n\n    function register(name, Factory, transient, base) {\n      var definition = {\n        dialog: null,\n        factory: Factory\n      }; //if this is based on an existing dialog, create a new definition\n      //by applying the new protoype over the existing one.\n\n      if (base !== undefined) {\n        definition.factory = function () {\n          return extend(new dialogs[base].factory(), new Factory());\n        };\n      }\n\n      if (!transient) {\n        //create a new definition based on dialog\n        definition.dialog = extend(new definition.factory(), dialog);\n      }\n\n      return dialogs[name] = definition;\n    }\n\n    return {\n      /**\r\n       * Alertify defaults\r\n       * \r\n       * @type {Object}\r\n       */\n      defaults: defaults,\n\n      /**\r\n       * Dialogs factory \r\n       *\r\n       * @param {string}      Dialog name.\r\n       * @param {Function}    A Dialog factory function.\r\n       * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n       * @param {String}      The name of the base type to inherit from.\r\n       */\n      dialog: function (name, Factory, transient, base) {\n        // get request, create a new instance and return it.\n        if (typeof Factory !== 'function') {\n          return get_dialog(name);\n        }\n\n        if (this.hasOwnProperty(name)) {\n          throw new Error('alertify.dialog: name already exists');\n        } // register the dialog\n\n\n        var definition = register(name, Factory, transient, base);\n\n        if (transient) {\n          // make it public\n          this[name] = function () {\n            //if passed with no params, consider it a get request\n            if (arguments.length === 0) {\n              return definition.dialog;\n            } else {\n              var instance = extend(new definition.factory(), dialog); //ensure init\n\n              if (instance && typeof instance.__init === 'function') {\n                instance.__init(instance);\n              }\n\n              instance['main'].apply(instance, arguments);\n              return instance['show'].apply(instance);\n            }\n          };\n        } else {\n          // make it public\n          this[name] = function () {\n            //ensure init\n            if (definition.dialog && typeof definition.dialog.__init === 'function') {\n              definition.dialog.__init(definition.dialog);\n            } //if passed with no params, consider it a get request\n\n\n            if (arguments.length === 0) {\n              return definition.dialog;\n            } else {\n              var dialog = definition.dialog;\n              dialog['main'].apply(definition.dialog, arguments);\n              return dialog['show'].apply(definition.dialog);\n            }\n          };\n        }\n      },\n\n      /**\r\n       * Close all open dialogs.\r\n       *\r\n       * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n       *\r\n       * @return {undefined}\r\n       */\n      closeAll: function (except) {\n        var clone = openDialogs.slice(0);\n\n        for (var x = 0; x < clone.length; x += 1) {\n          var instance = clone[x];\n\n          if (except === undefined || except !== instance) {\n            instance.close();\n          }\n        }\n      },\n\n      /**\r\n       * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n       *\r\n       * @param {string} name The dialog name.\r\n       * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n       * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n       *\r\n       * @return {undefined}\r\n       */\n      setting: function (name, key, value) {\n        if (name === 'notifier') {\n          return notifier.setting(key, value);\n        }\n\n        var dialog = get_dialog(name);\n\n        if (dialog) {\n          return dialog.setting(key, value);\n        }\n      },\n\n      /**\r\n       * [Alias] Sets dialog settings/options \r\n       */\n      set: function (name, key, value) {\n        return this.setting(name, key, value);\n      },\n\n      /**\r\n       * [Alias] Gets dialog settings/options \r\n       */\n      get: function (name, key) {\n        return this.setting(name, key);\n      },\n\n      /**\r\n       * Creates a new notification message.\r\n       * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n       * This allows for custom look and feel for various types of notifications.\r\n       *\r\n       * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n       * @param  {String}                 [type='']\t\t\t\tType of log message\r\n       * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      notify: function (message, type, wait, callback) {\n        return notifier.create(type, callback).push(message, wait);\n      },\n\n      /**\r\n       * Creates a new notification message.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      message: function (message, wait, callback) {\n        return notifier.create(null, callback).push(message, wait);\n      },\n\n      /**\r\n       * Creates a new notification message of type 'success'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      success: function (message, wait, callback) {\n        return notifier.create('success', callback).push(message, wait);\n      },\n\n      /**\r\n       * Creates a new notification message of type 'error'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      error: function (message, wait, callback) {\n        return notifier.create('error', callback).push(message, wait);\n      },\n\n      /**\r\n       * Creates a new notification message of type 'warning'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      warning: function (message, wait, callback) {\n        return notifier.create('warning', callback).push(message, wait);\n      },\n\n      /**\r\n       * Dismisses all open notifications\r\n       *\r\n       * @return {undefined}\r\n       */\n      dismissAll: function () {\n        notifier.dismissAll();\n      }\n    };\n  }\n\n  var alertify = new Alertify();\n  /**\r\n  * Alert dialog definition\r\n  *\r\n  * invoked by:\r\n  *\talertify.alert(message);\r\n  *\talertify.alert(title, message);\r\n  *\talertify.alert(message, onok);\r\n  *\talertify.alert(title, message, onok);\r\n   */\n\n  alertify.dialog('alert', function () {\n    return {\n      main: function (_title, _message, _onok) {\n        var title, message, onok;\n\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n\n          case 2:\n            if (typeof _message === 'function') {\n              message = _title;\n              onok = _message;\n            } else {\n              title = _title;\n              message = _message;\n            }\n\n            break;\n\n          case 3:\n            title = _title;\n            message = _message;\n            onok = _onok;\n            break;\n        }\n\n        this.set('title', title);\n        this.set('message', message);\n        this.set('onok', onok);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.ok\n          }],\n          focus: {\n            element: 0,\n            select: false\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {// nothing\n      },\n      prepare: function () {//nothing\n      },\n      setMessage: function (message) {\n        this.setContent(message);\n      },\n      settings: {\n        message: undefined,\n        onok: undefined,\n        label: undefined\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n\n          case 'label':\n            if (this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].element.innerHTML = newValue;\n            }\n\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        if (typeof this.get('onok') === 'function') {\n          var returnValue = this.get('onok').call(this, closeEvent);\n\n          if (typeof returnValue !== 'undefined') {\n            closeEvent.cancel = !returnValue;\n          }\n        }\n      }\n    };\n  });\n  /**\r\n   * Confirm dialog object\r\n   *\r\n   *\talertify.confirm(message);\r\n   *\talertify.confirm(message, onok);\r\n   *\talertify.confirm(message, onok, oncancel);\r\n   *\talertify.confirm(title, message, onok, oncancel);\r\n   */\n\n  alertify.dialog('confirm', function () {\n    var autoConfirm = {\n      timer: null,\n      index: null,\n      text: null,\n      duration: null,\n      task: function (event, self) {\n        if (self.isOpen()) {\n          self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\n          autoConfirm.duration -= 1;\n\n          if (autoConfirm.duration === -1) {\n            clearAutoConfirm(self);\n            var button = self.__internal.buttons[autoConfirm.index];\n            var closeEvent = createCloseEvent(autoConfirm.index, button);\n\n            if (typeof self.callback === 'function') {\n              self.callback.apply(self, [closeEvent]);\n            } //close the dialog.\n\n\n            if (closeEvent.close !== false) {\n              self.close();\n            }\n          }\n        } else {\n          clearAutoConfirm(self);\n        }\n      }\n    };\n\n    function clearAutoConfirm(self) {\n      if (autoConfirm.timer !== null) {\n        clearInterval(autoConfirm.timer);\n        autoConfirm.timer = null;\n        self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\n      }\n    }\n\n    function startAutoConfirm(self, index, duration) {\n      clearAutoConfirm(self);\n      autoConfirm.duration = duration;\n      autoConfirm.index = index;\n      autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\n      autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\n      autoConfirm.task(null, self);\n    }\n\n    return {\n      main: function (_title, _message, _onok, _oncancel) {\n        var title, message, onok, oncancel;\n\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n\n          case 2:\n            message = _title;\n            onok = _message;\n            break;\n\n          case 3:\n            message = _title;\n            onok = _message;\n            oncancel = _onok;\n            break;\n\n          case 4:\n            title = _title;\n            message = _message;\n            onok = _onok;\n            oncancel = _oncancel;\n            break;\n        }\n\n        this.set('title', title);\n        this.set('message', message);\n        this.set('onok', onok);\n        this.set('oncancel', oncancel);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ENTER,\n            className: alertify.defaults.theme.ok\n          }, {\n            text: alertify.defaults.glossary.cancel,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.cancel\n          }],\n          focus: {\n            element: 0,\n            select: false\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {//nothing\n      },\n      prepare: function () {//nothing\n      },\n      setMessage: function (message) {\n        this.setContent(message);\n      },\n      settings: {\n        message: null,\n        labels: null,\n        onok: null,\n        oncancel: null,\n        defaultFocus: null,\n        reverseButtons: null\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n\n          case 'labels':\n            if ('ok' in newValue && this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].text = newValue.ok;\n              this.__internal.buttons[0].element.innerHTML = newValue.ok;\n            }\n\n            if ('cancel' in newValue && this.__internal.buttons[1].element) {\n              this.__internal.buttons[1].text = newValue.cancel;\n              this.__internal.buttons[1].element.innerHTML = newValue.cancel;\n            }\n\n            break;\n\n          case 'reverseButtons':\n            if (newValue === true) {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\n            } else {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\n            }\n\n            break;\n\n          case 'defaultFocus':\n            this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        clearAutoConfirm(this);\n        var returnValue;\n\n        switch (closeEvent.index) {\n          case 0:\n            if (typeof this.get('onok') === 'function') {\n              returnValue = this.get('onok').call(this, closeEvent);\n\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n\n            break;\n\n          case 1:\n            if (typeof this.get('oncancel') === 'function') {\n              returnValue = this.get('oncancel').call(this, closeEvent);\n\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n\n            break;\n        }\n      },\n      autoOk: function (duration) {\n        startAutoConfirm(this, 0, duration);\n        return this;\n      },\n      autoCancel: function (duration) {\n        startAutoConfirm(this, 1, duration);\n        return this;\n      }\n    };\n  });\n  /**\r\n   * Prompt dialog object\r\n   *\r\n   * invoked by:\r\n   *\talertify.prompt(message);\r\n   *\talertify.prompt(message, value);\r\n   *\talertify.prompt(message, value, onok);\r\n   *\talertify.prompt(message, value, onok, oncancel);\r\n   *\talertify.prompt(title, message, value, onok, oncancel);\r\n   */\n\n  alertify.dialog('prompt', function () {\n    var input = document.createElement('INPUT');\n    var p = document.createElement('P');\n    return {\n      main: function (_title, _message, _value, _onok, _oncancel) {\n        var title, message, value, onok, oncancel;\n\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n\n          case 2:\n            message = _title;\n            value = _message;\n            break;\n\n          case 3:\n            message = _title;\n            value = _message;\n            onok = _value;\n            break;\n\n          case 4:\n            message = _title;\n            value = _message;\n            onok = _value;\n            oncancel = _onok;\n            break;\n\n          case 5:\n            title = _title;\n            message = _message;\n            value = _value;\n            onok = _onok;\n            oncancel = _oncancel;\n            break;\n        }\n\n        this.set('title', title);\n        this.set('message', message);\n        this.set('value', value);\n        this.set('onok', onok);\n        this.set('oncancel', oncancel);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ENTER,\n            className: alertify.defaults.theme.ok\n          }, {\n            text: alertify.defaults.glossary.cancel,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.cancel\n          }],\n          focus: {\n            element: input,\n            select: true\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {\n        input.className = alertify.defaults.theme.input;\n        input.setAttribute('type', 'text');\n        input.value = this.get('value');\n        this.elements.content.appendChild(p);\n        this.elements.content.appendChild(input);\n      },\n      prepare: function () {//nothing\n      },\n      setMessage: function (message) {\n        if (typeof message === 'string') {\n          clearContents(p);\n          p.innerHTML = message;\n        } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\n          clearContents(p);\n          p.appendChild(message);\n        }\n      },\n      settings: {\n        message: undefined,\n        labels: undefined,\n        onok: undefined,\n        oncancel: undefined,\n        value: '',\n        type: 'text',\n        reverseButtons: undefined\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n\n          case 'value':\n            input.value = newValue;\n            break;\n\n          case 'type':\n            switch (newValue) {\n              case 'text':\n              case 'color':\n              case 'date':\n              case 'datetime-local':\n              case 'email':\n              case 'month':\n              case 'number':\n              case 'password':\n              case 'search':\n              case 'tel':\n              case 'time':\n              case 'week':\n                input.type = newValue;\n                break;\n\n              default:\n                input.type = 'text';\n                break;\n            }\n\n            break;\n\n          case 'labels':\n            if (newValue.ok && this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].element.innerHTML = newValue.ok;\n            }\n\n            if (newValue.cancel && this.__internal.buttons[1].element) {\n              this.__internal.buttons[1].element.innerHTML = newValue.cancel;\n            }\n\n            break;\n\n          case 'reverseButtons':\n            if (newValue === true) {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\n            } else {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\n            }\n\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        var returnValue;\n\n        switch (closeEvent.index) {\n          case 0:\n            this.settings.value = input.value;\n\n            if (typeof this.get('onok') === 'function') {\n              returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\n\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n\n            break;\n\n          case 1:\n            if (typeof this.get('oncancel') === 'function') {\n              returnValue = this.get('oncancel').call(this, closeEvent);\n\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n\n            if (!closeEvent.cancel) {\n              input.value = this.settings.value;\n            }\n\n            break;\n        }\n      }\n    };\n  }); // CommonJS\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = alertify; // AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return alertify;\n    }); // window\n  } else if (!window.alertify) {\n    window.alertify = alertify;\n  }\n})(typeof window !== 'undefined' ? window : this);","map":{"version":3,"sources":["C:/Users/lipdi/Documents/Engenharia de software/7 Semestre/Desenvolvimento Web/Entrega2/UTFitter-front/src/alertify/alertify.js"],"names":["window","NOT_DISABLED_NOT_RESET","keys","ENTER","ESC","F1","F12","LEFT","RIGHT","TAB","defaults","autoReset","basic","closable","closableByDimmer","invokeOnCloseOff","frameless","defaultFocusOff","maintainFocus","maximizable","modal","movable","moveBounded","overflow","padding","pinnable","pinned","preventBodyShift","resizable","startMaximized","transition","tabbable","join","notifier","delay","position","closeButton","classes","base","prefix","message","top","right","bottom","left","center","visible","hidden","close","glossary","title","ok","cancel","acccpt","deny","confirm","decline","maximize","restore","theme","input","hooks","preinit","postinit","openDialogs","addClass","element","classNames","className","removeClass","original","split","toBeRemoved","x","length","index","indexOf","splice","isRightToLeft","getComputedStyle","document","body","direction","getScrollTop","documentElement","scrollTop","getScrollLeft","scrollLeft","clearContents","lastChild","removeChild","copy","src","cpy","Array","isArray","push","Date","getTime","RegExp","source","global","ignoreCase","multiline","lastIndex","prop","hasOwnProperty","destruct","instance","initialize","elements","root","parentNode","settings","__settings","__init","__internal","on","addEventListener","el","event","fn","useCapture","attachEvent","off","removeEventListener","detachEvent","t","type","supported","transitions","style","undefined","delegate","context","method","arguments","args","apply","createCloseEvent","button","dispatchEvent","eventType","get","call","dialog","usedKeys","reflow","tabindex","isSafari","navigator","userAgent","templates","dimmer","reset","commands","header","content","footer","buttons","primary","auxiliary","resizeHandle","animationIn","animationOut","capture","fixed","maximized","modeless","noSelection","noOverflow","noPadding","pin","shake","unpinned","alertify","setup","options","focus","select","buttonsDefinition","b","ref","i","internal","isOpen","activeElement","timerIn","timerOut","onshow","onclosing","onclose","onfocus","onmove","onmoved","onresize","onresized","onmaximize","onmaximized","onrestore","onrestored","resetHandler","beginMoveHandler","beginResizeHandler","bringToFrontHandler","modalClickHandler","buttonsClickHandler","commandsClickHandler","transitionInHandler","transitionOutHandler","destroy","createElement","display","innerHTML","firstChild","container","nextSibling","buttonTemplate","key","cloneNode","text","attrs","setAttribute","scope","appendChild","onReset","beginMove","beginResize","bringToFront","handleTransitionInEvent","handleTransitionOutEvent","opKey","set","build","scrollX","scrollY","saveScrollPosition","restoreScrollPosition","scrollTo","ensureNoOverflow","requiresNoOverflow","isModal","isMaximized","topScroll","add","scrollHeight","clientHeight","updateTransition","value","oldValue","offsetWidth","updateDisplayMode","unbindModelessEvents","updateAbsPositionFix","bindModelessEvents","updateBasicMode","updateFramelessMode","setFocus","optionUpdated","option","newValue","setHeader","updatePinned","updateClosable","updateMaximizable","updatePinnable","updateMovable","updateResizable","onupdate","update","obj","callback","result","op","items","found","old","Error","triggerClose","triggerCallback","invokeOnClose","target","srcElement","isPinned","unpin","addAbsPositionFix","marginTop","marginLeft","marginRight","removeAbsPositionFix","parseInt","bindClosableEvents","unbindClosableEvents","cancelClick","modalClickHandlerTS","timeStamp","callbackTS","cancelKeyup","check","now","idx","disabled","closeEvent","keyupHandler","keyCode","keydownHandler","preventDefault","stopPropagation","resetTarget","querySelector","firstReset","lastReset","lastFocusedElement","relatedTarget","within","contains","findTabbable","last","tabbables","slice","querySelectorAll","reverse","offsetParent","offsetHeight","getClientRects","recycleTab","shiftKey","clearTimeout","resetMove","resetResize","offsetX","offsetY","xProp","yProp","bounds","refreshTop","moveDelegate","moveElement","moveElementBounded","Math","min","maxLeft","max","minLeft","maxTop","minTop","eventSrc","targetTouches","current","offsetLeft","offsetTop","move","endMove","bindMovableEvents","unbindMovableEvents","startingLeft","Number","Nan","startingWidth","minWidth","handleOffset","resizeElement","pageRelative","X","Y","pageX","pageY","clientX","clientY","isRTL","isNaN","height","width","diff","abs","minHeight","maxWidth","resize","endResize","bindResizableEvents","unbindResizableEvents","windowResize","bindEvents","unbindEvents","moveTo","y","resizeTo","w","parseFloat","h","regex","match","clientWidth","setting","self","k","o","n","settingUpdated","item","HTMLElement","setContent","showModal","show","hasAttribute","prepare","removeAttribute","setTimeout","closeOthers","closeAll","openInstances","updatePosition","pushInstance","pushed","popInstance","create","div","clickDelegate","getAttribute","dismiss","transitionDone","timer","clickHandler","transitionEndHandler","transitionTimeout","clearTimers","_content","_wait","wait","insertBefore","ondismiss","clicked","dismissOthers","dismissAll","except","clone","Alertify","dialogs","extend","sub","get_dialog","name","register","Factory","transient","definition","factory","notify","success","error","warning","main","_title","_message","_onok","onok","setMessage","label","returnValue","autoConfirm","duration","task","clearAutoConfirm","clearInterval","startAutoConfirm","setInterval","_oncancel","oncancel","labels","defaultFocus","reverseButtons","autoOk","autoCancel","p","_value","module","exports","define","amd"],"mappings":"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","sourcesContent":["/**\r\n * alertifyjs 1.12.0 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\r\n( function ( window ) {\r\n    'use strict';\r\n    var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\r\n    /**\r\n     * Keys enum\r\n     * @type {Object}\r\n     */\r\n    var keys = {\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        F1: 112,\r\n        F12: 123,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        TAB: 9\r\n    };\r\n    /**\r\n     * Default options \r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        autoReset:true,\r\n        basic:false,\r\n        closable:true,\r\n        closableByDimmer:true,\r\n        invokeOnCloseOff:false,\r\n        frameless:false,\r\n        defaultFocusOff:false,\r\n        maintainFocus:true, //global default not per instance, applies to all dialogs\r\n        maximizable:true,\r\n        modal:true,\r\n        movable:true,\r\n        moveBounded:false,\r\n        overflow:true,\r\n        padding: true,\r\n        pinnable:true,\r\n        pinned:true,\r\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\r\n        resizable:true,\r\n        startMaximized:false,\r\n        transition:'pulse',\r\n        tabbable:['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])'+NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET+','),//global\r\n        notifier:{\r\n            delay:5,\r\n            position:'bottom-right',\r\n            closeButton:false,\r\n            classes: {\r\n                base: 'alertify-notifier',\r\n                prefix:'ajs-',\r\n                message: 'ajs-message',\r\n                top: 'ajs-top',\r\n                right: 'ajs-right',\r\n                bottom: 'ajs-bottom',\r\n                left: 'ajs-left',\r\n                center: 'ajs-center',\r\n                visible: 'ajs-visible',\r\n                hidden: 'ajs-hidden',\r\n                close: 'ajs-close'\r\n            }\r\n        },\r\n        glossary:{\r\n            title:'AlertifyJS',\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            acccpt: 'Accept',\r\n            deny: 'Deny',\r\n            confirm: 'Confirm',\r\n            decline: 'Decline',\r\n            close: 'Close',\r\n            maximize: 'Maximize',\r\n            restore: 'Restore',\r\n        },\r\n        theme:{\r\n            input:'ajs-input',\r\n            ok:'ajs-ok',\r\n            cancel:'ajs-cancel',\r\n        },\r\n        hooks:{\r\n            preinit:function(){},\r\n            postinit:function(){}\r\n        }\r\n    };\r\n    \r\n    //holds open dialogs instances\r\n    var openDialogs = [];\r\n\r\n    /**\r\n     * [Helper]  Adds the specified class(es) to the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function addClass(element,classNames){\r\n        element.className += ' ' + classNames;\r\n    }\r\n    \r\n    /**\r\n     * [Helper]  Removes the specified class(es) from the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function removeClass(element, classNames) {\r\n        var original = element.className.split(' ');\r\n        var toBeRemoved = classNames.split(' ');\r\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\r\n            var index = original.indexOf(toBeRemoved[x]);\r\n            if (index > -1){\r\n                original.splice(index,1);\r\n            }\r\n        }\r\n        element.className = original.join(' ');\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Checks if the document is RTL\r\n     *\r\n     * @return {Boolean} True if the document is RTL, false otherwise.\r\n     */\r\n    function isRightToLeft(){\r\n        return window.getComputedStyle(document.body).direction === 'rtl';\r\n    }\r\n    /**\r\n     * [Helper]  Get the document current scrollTop\r\n     *\r\n     * @return {Number} current document scrollTop value\r\n     */\r\n    function getScrollTop(){\r\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Get the document current scrollLeft\r\n     *\r\n     * @return {Number} current document scrollLeft value\r\n     */\r\n    function getScrollLeft(){\r\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\r\n    }\r\n\r\n    /**\r\n    * Helper: clear contents\r\n    *\r\n    */\r\n    function clearContents(element){\r\n        while (element.lastChild) {\r\n            element.removeChild(element.lastChild);\r\n        }\r\n    }\r\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\r\n    function copy(src) {\r\n        if(null === src){\r\n            return src;\r\n        }\r\n        var cpy;\r\n        if(Array.isArray(src)){\r\n            cpy = [];\r\n            for(var x=0;x<src.length;x+=1){\r\n                cpy.push(copy(src[x]));\r\n            }\r\n            return cpy;\r\n        }\r\n      \r\n        if(src instanceof Date){\r\n            return new Date(src.getTime());\r\n        }\r\n      \r\n        if(src instanceof RegExp){\r\n            cpy = new RegExp(src.source);\r\n            cpy.global = src.global;\r\n            cpy.ignoreCase = src.ignoreCase;\r\n            cpy.multiline = src.multiline;\r\n            cpy.lastIndex = src.lastIndex;\r\n            return cpy;\r\n        }\r\n        \r\n        if(typeof src === 'object'){\r\n            cpy = {};\r\n            // copy dialog pototype over definition.\r\n            for (var prop in src) {\r\n                if (src.hasOwnProperty(prop)) {\r\n                    cpy[prop] = copy(src[prop]);\r\n                }\r\n            }\r\n            return cpy;\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n      * Helper: destruct the dialog\r\n      *\r\n      */\r\n    function destruct(instance, initialize){\r\n        if(instance.elements){\r\n            //delete the dom and it's references.\r\n            var root = instance.elements.root;\r\n            root.parentNode.removeChild(root);\r\n            delete instance.elements;\r\n            //copy back initial settings.\r\n            instance.settings = copy(instance.__settings);\r\n            //re-reference init function.\r\n            instance.__init = initialize;\r\n            //delete __internal variable to allow re-initialization.\r\n            delete instance.__internal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use a closure to return proper event listener method. Try to use\r\n     * `addEventListener` by default but fallback to `attachEvent` for\r\n     * unsupported browser. The closure simply ensures that the test doesn't\r\n     * happen every time the method is called.\r\n     *\r\n     * @param    {Node}     el    Node element\r\n     * @param    {String}   event Event type\r\n     * @param    {Function} fn    Callback of event\r\n     * @return   {Function}\r\n     */\r\n    var on = (function () {\r\n        if (document.addEventListener) {\r\n            return function (el, event, fn, useCapture) {\r\n                el.addEventListener(event, fn, useCapture === true);\r\n            };\r\n        } else if (document.attachEvent) {\r\n            return function (el, event, fn) {\r\n                el.attachEvent('on' + event, fn);\r\n            };\r\n        }\r\n    }());\r\n\r\n    /**\r\n     * Use a closure to return proper event listener method. Try to use\r\n     * `removeEventListener` by default but fallback to `detachEvent` for\r\n     * unsupported browser. The closure simply ensures that the test doesn't\r\n     * happen every time the method is called.\r\n     *\r\n     * @param    {Node}     el    Node element\r\n     * @param    {String}   event Event type\r\n     * @param    {Function} fn    Callback of event\r\n     * @return   {Function}\r\n     */\r\n    var off = (function () {\r\n        if (document.removeEventListener) {\r\n            return function (el, event, fn, useCapture) {\r\n                el.removeEventListener(event, fn, useCapture === true);\r\n            };\r\n        } else if (document.detachEvent) {\r\n            return function (el, event, fn) {\r\n                el.detachEvent('on' + event, fn);\r\n            };\r\n        }\r\n    }());\r\n\r\n    /**\r\n     * Prevent default event from firing\r\n     *\r\n     * @param  {Event} event Event object\r\n     * @return {undefined}\r\n\r\n    function prevent ( event ) {\r\n        if ( event ) {\r\n            if ( event.preventDefault ) {\r\n                event.preventDefault();\r\n            } else {\r\n                event.returnValue = false;\r\n            }\r\n        }\r\n    }\r\n    */\r\n    var transition = (function () {\r\n        var t, type;\r\n        var supported = false;\r\n        var transitions = {\r\n            'animation'        : 'animationend',\r\n            'OAnimation'       : 'oAnimationEnd oanimationend',\r\n            'msAnimation'      : 'MSAnimationEnd',\r\n            'MozAnimation'     : 'animationend',\r\n            'WebkitAnimation'  : 'webkitAnimationEnd'\r\n        };\r\n\r\n        for (t in transitions) {\r\n            if (document.documentElement.style[t] !== undefined) {\r\n                type = transitions[t];\r\n                supported = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            supported: supported\r\n        };\r\n    }());\r\n\r\n    /**\r\n    * Creates event handler delegate that sends the instance as last argument.\r\n    * \r\n    * @return {Function}    a function wrapper which sends the instance as last argument.\r\n    */\r\n    function delegate(context, method) {\r\n        return function () {\r\n            if (arguments.length > 0) {\r\n                var args = [];\r\n                for (var x = 0; x < arguments.length; x += 1) {\r\n                    args.push(arguments[x]);\r\n                }\r\n                args.push(context);\r\n                return method.apply(context, args);\r\n            }\r\n            return method.apply(context, [null, context]);\r\n        };\r\n    }\r\n    /**\r\n    * Helper for creating a dialog close event.\r\n    * \r\n    * @return {object}\r\n    */\r\n    function createCloseEvent(index, button) {\r\n        return {\r\n            index: index,\r\n            button: button,\r\n            cancel: false\r\n        };\r\n    }\r\n    /**\r\n    * Helper for dispatching events.\r\n    *\r\n    * @param  {string} evenType The type of the event to disptach.\r\n    * @param  {object} instance The dialog instance disptaching the event.\r\n    *\r\n    * @return   {any}   The result of the invoked function.\r\n    */\r\n    function dispatchEvent(eventType, instance) {\r\n        if ( typeof instance.get(eventType) === 'function' ) {\r\n            return instance.get(eventType).call(instance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Super class for all dialogs\r\n     *\r\n     * @return {Object}\t\tbase dialog prototype\r\n     */\r\n    var dialog = (function () {\r\n        var //holds the list of used keys.\r\n            usedKeys = [],\r\n            //dummy variable, used to trigger dom reflow.\r\n            reflow = null,\r\n            //holds body tab index in case it has any.\r\n            tabindex = false,\r\n            //condition for detecting safari\r\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\r\n            //dialog building blocks\r\n            templates = {\r\n                dimmer:'<div class=\"ajs-dimmer\"></div>',\r\n                /*tab index required to fire click event before body focus*/\r\n                modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\r\n                dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\r\n                reset: '<button class=\"ajs-reset\"></button>',\r\n                commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\r\n                header: '<div class=\"ajs-header\"></div>',\r\n                body: '<div class=\"ajs-body\"></div>',\r\n                content: '<div class=\"ajs-content\"></div>',\r\n                footer: '<div class=\"ajs-footer\"></div>',\r\n                buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\r\n                button: '<button class=\"ajs-button\"></button>',\r\n                resizeHandle: '<div class=\"ajs-handle\"></div>',\r\n            },\r\n            //common class names\r\n            classes = {\r\n                animationIn: 'ajs-in',\r\n                animationOut: 'ajs-out',\r\n                base: 'alertify',\r\n                basic:'ajs-basic',\r\n                capture: 'ajs-capture',\r\n                closable:'ajs-closable',\r\n                fixed: 'ajs-fixed',\r\n                frameless:'ajs-frameless',\r\n                hidden: 'ajs-hidden',\r\n                maximize: 'ajs-maximize',\r\n                maximized: 'ajs-maximized',\r\n                maximizable:'ajs-maximizable',\r\n                modeless: 'ajs-modeless',\r\n                movable: 'ajs-movable',\r\n                noSelection: 'ajs-no-selection',\r\n                noOverflow: 'ajs-no-overflow',\r\n                noPadding:'ajs-no-padding',\r\n                pin:'ajs-pin',\r\n                pinnable:'ajs-pinnable',\r\n                prefix: 'ajs-',\r\n                resizable: 'ajs-resizable',\r\n                restore: 'ajs-restore',\r\n                shake:'ajs-shake',\r\n                unpinned:'ajs-unpinned',\r\n            };\r\n\r\n        /**\r\n         * Helper: initializes the dialog instance\r\n         * \r\n         * @return\t{Number}\tThe total count of currently open modals.\r\n         */\r\n        function initialize(instance){\r\n            \r\n            if(!instance.__internal){\r\n                //invoke preinit global hook\r\n                alertify.defaults.hooks.preinit(instance);\r\n                //no need to expose init after this.\r\n                delete instance.__init;\r\n              \r\n                //keep a copy of initial dialog settings\r\n                if(!instance.__settings){\r\n                    instance.__settings = copy(instance.settings);\r\n                }\r\n                \r\n                //get dialog buttons/focus setup\r\n                var setup;\r\n                if(typeof instance.setup === 'function'){\r\n                    setup = instance.setup();\r\n                    setup.options = setup.options  || {};\r\n                    setup.focus = setup.focus  || {};\r\n                }else{\r\n                    setup = {\r\n                        buttons:[],\r\n                        focus:{\r\n                            element:null,\r\n                            select:false\r\n                        },\r\n                        options:{\r\n                        }\r\n                    };\r\n                }\r\n                \r\n                //initialize hooks object.\r\n                if(typeof instance.hooks !== 'object'){\r\n                    instance.hooks = {};\r\n                }\r\n\r\n                //copy buttons defintion\r\n                var buttonsDefinition = [];\r\n                if(Array.isArray(setup.buttons)){\r\n                    for(var b=0;b<setup.buttons.length;b+=1){\r\n                        var ref  = setup.buttons[b],\r\n                            cpy = {};\r\n                        for (var i in ref) {\r\n                            if (ref.hasOwnProperty(i)) {\r\n                                cpy[i] = ref[i];\r\n                            }\r\n                        }\r\n                        buttonsDefinition.push(cpy);\r\n                    }\r\n                }\r\n\r\n                var internal = instance.__internal = {\r\n                    /**\r\n                     * Flag holding the open state of the dialog\r\n                     * \r\n                     * @type {Boolean}\r\n                     */\r\n                    isOpen:false,\r\n                    /**\r\n                     * Active element is the element that will receive focus after\r\n                     * closing the dialog. It defaults as the body tag, but gets updated\r\n                     * to the last focused element before the dialog was opened.\r\n                     *\r\n                     * @type {Node}\r\n                     */\r\n                    activeElement:document.body,\r\n                    timerIn:undefined,\r\n                    timerOut:undefined,\r\n                    buttons: buttonsDefinition,\r\n                    focus: setup.focus,\r\n                    options: {\r\n                        title: undefined,\r\n                        modal: undefined,\r\n                        basic:undefined,\r\n                        frameless:undefined,\r\n                        defaultFocusOff:undefined,\r\n                        pinned: undefined,\r\n                        movable: undefined,\r\n                        moveBounded:undefined,\r\n                        resizable: undefined,\r\n                        autoReset: undefined,\r\n                        closable: undefined,\r\n                        closableByDimmer: undefined,\r\n                        invokeOnCloseOff:undefined,\r\n                        maximizable: undefined,\r\n                        startMaximized: undefined,\r\n                        pinnable: undefined,\r\n                        transition: undefined,\r\n                        padding:undefined,\r\n                        overflow:undefined,\r\n                        onshow:undefined,\r\n                        onclosing:undefined,\r\n                        onclose:undefined,\r\n                        onfocus:undefined,\r\n                        onmove:undefined,\r\n                        onmoved:undefined,\r\n                        onresize:undefined,\r\n                        onresized:undefined,\r\n                        onmaximize:undefined,\r\n                        onmaximized:undefined,\r\n                        onrestore:undefined,\r\n                        onrestored:undefined\r\n                    },\r\n                    resetHandler:undefined,\r\n                    beginMoveHandler:undefined,\r\n                    beginResizeHandler:undefined,\r\n                    bringToFrontHandler:undefined,\r\n                    modalClickHandler:undefined,\r\n                    buttonsClickHandler:undefined,\r\n                    commandsClickHandler:undefined,\r\n                    transitionInHandler:undefined,\r\n                    transitionOutHandler:undefined,\r\n                    destroy:undefined\r\n                };\r\n\r\n                var elements = {};\r\n                //root node\r\n                elements.root = document.createElement('div');\r\n                //prevent FOUC in case of async styles loading.\r\n                elements.root.style.display = 'none';\r\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\r\n\r\n                elements.root.innerHTML = templates.dimmer + templates.modal;\r\n                \r\n                //dimmer\r\n                elements.dimmer = elements.root.firstChild;\r\n\r\n                //dialog\r\n                elements.modal = elements.root.lastChild;\r\n                elements.modal.innerHTML = templates.dialog;\r\n                elements.dialog = elements.modal.firstChild;\r\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\r\n\r\n                //reset links\r\n                elements.reset = [];\r\n                elements.reset.push(elements.dialog.firstChild);\r\n                elements.reset.push(elements.dialog.lastChild);\r\n                \r\n                //commands\r\n                elements.commands = {};\r\n                elements.commands.container = elements.reset[0].nextSibling;\r\n                elements.commands.pin = elements.commands.container.firstChild;\r\n                elements.commands.maximize = elements.commands.pin.nextSibling;\r\n                elements.commands.close = elements.commands.maximize.nextSibling;\r\n                \r\n                //header\r\n                elements.header = elements.commands.container.nextSibling;\r\n\r\n                //body\r\n                elements.body = elements.header.nextSibling;\r\n                elements.body.innerHTML = templates.content;\r\n                elements.content = elements.body.firstChild;\r\n\r\n                //footer\r\n                elements.footer = elements.body.nextSibling;\r\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\r\n                \r\n                //resize handle\r\n                elements.resizeHandle = elements.footer.nextSibling;\r\n\r\n                //buttons\r\n                elements.buttons = {};\r\n                elements.buttons.auxiliary = elements.footer.firstChild;\r\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\r\n                elements.buttons.primary.innerHTML = templates.button;\r\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\r\n                //remove button template\r\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\r\n                               \r\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\r\n                    var button = instance.__internal.buttons[x];\r\n                    \r\n                    // add to the list of used keys.\r\n                    if(usedKeys.indexOf(button.key) < 0){\r\n                        usedKeys.push(button.key);\r\n                    }\r\n\r\n                    button.element = elements.buttonTemplate.cloneNode();\r\n                    button.element.innerHTML = button.text;\r\n                    if(typeof button.className === 'string' &&  button.className !== ''){\r\n                        addClass(button.element, button.className);\r\n                    }\r\n                    for(var key in button.attrs){\r\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\r\n                            button.element.setAttribute(key, button.attrs[key]);\r\n                        }\r\n                    }\r\n                    if(button.scope === 'auxiliary'){\r\n                        elements.buttons.auxiliary.appendChild(button.element);\r\n                    }else{\r\n                        elements.buttons.primary.appendChild(button.element);\r\n                    }\r\n                }\r\n                //make elements pubic\r\n                instance.elements = elements;\r\n                \r\n                //save event handlers delegates\r\n                internal.resetHandler = delegate(instance, onReset);\r\n                internal.beginMoveHandler = delegate(instance, beginMove);\r\n                internal.beginResizeHandler = delegate(instance, beginResize);\r\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\r\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\r\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\r\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\r\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\r\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\r\n\r\n                //settings\r\n                for(var opKey in internal.options){\r\n                    if(setup.options[opKey] !== undefined){\r\n                        // if found in user options\r\n                        instance.set(opKey, setup.options[opKey]);\r\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\r\n                        // else if found in defaults options\r\n                        instance.set(opKey, alertify.defaults[opKey]);\r\n                    }else if(opKey === 'title' ) {\r\n                        // else if title key, use alertify.defaults.glossary\r\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\r\n                    }\r\n                }\r\n\r\n                // allow dom customization\r\n                if(typeof instance.build === 'function'){\r\n                    instance.build();\r\n                }\r\n\r\n                //invoke postinit global hook\r\n                alertify.defaults.hooks.postinit(instance);\r\n            }\r\n\r\n            //add to the end of the DOM tree.\r\n            document.body.appendChild(instance.elements.root);\r\n        }\r\n\r\n        /**\r\n         * Helper: maintains scroll position\r\n         *\r\n         */\r\n        var scrollX, scrollY;\r\n        function saveScrollPosition(){\r\n            scrollX = getScrollLeft();\r\n            scrollY = getScrollTop();\r\n        }\r\n        function restoreScrollPosition(){\r\n            window.scrollTo(scrollX, scrollY);\r\n        }\r\n\r\n        /**\r\n         * Helper: adds/removes no-overflow class from body\r\n         *\r\n         */\r\n        function ensureNoOverflow(){\r\n            var requiresNoOverflow = 0;\r\n            for(var x=0;x<openDialogs.length;x+=1){\r\n                var instance = openDialogs[x];\r\n                if(instance.isModal() || instance.isMaximized()){\r\n                    requiresNoOverflow+=1;\r\n                }\r\n            }\r\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\r\n                //last open modal or last maximized one\r\n                removeClass(document.body, classes.noOverflow);\r\n                preventBodyShift(false);\r\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\r\n                //first open modal or first maximized one\r\n                preventBodyShift(true);\r\n                addClass(document.body, classes.noOverflow);\r\n            }\r\n        }\r\n        var top = '', topScroll = 0;\r\n        /**\r\n         * Helper: prevents body shift.\r\n         *\r\n         */\r\n        function preventBodyShift(add){\r\n            if(alertify.defaults.preventBodyShift){\r\n                if(add && document.documentElement.scrollHeight > document.documentElement.clientHeight ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\r\n                    topScroll = scrollY;\r\n                    top = window.getComputedStyle(document.body).top;\r\n                    addClass(document.body, classes.fixed);\r\n                    document.body.style.top = -scrollY + 'px';\r\n                } else if(!add) {\r\n                    scrollY = topScroll;\r\n                    document.body.style.top = top;\r\n                    removeClass(document.body, classes.fixed);\r\n                    restoreScrollPosition();\r\n                }\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Sets the name of the transition used to show/hide the dialog\r\n         * \r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         */\r\n        function updateTransition(instance, value, oldValue){\r\n            if(typeof oldValue === 'string'){\r\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\r\n            }\r\n            addClass(instance.elements.root, classes.prefix + value);\r\n            reflow = instance.elements.root.offsetWidth;\r\n        }\r\n\t\t\r\n        /**\r\n         * Toggles the dialog display mode\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateDisplayMode(instance){\r\n            if(instance.get('modal')){\r\n\r\n                //make modal\r\n                removeClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    unbindModelessEvents(instance);\r\n\r\n                    //in case a pinned modless dialog was made modal while open.\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }else{\r\n                //make modelss\r\n                addClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    bindModelessEvents(instance);\r\n\r\n                    //in case pin/unpin was called while a modal is open\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog basic view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateBasicMode(instance){\r\n            if (instance.get('basic')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.basic);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.basic);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog frameless view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateFramelessMode(instance){\r\n            if (instance.get('frameless')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.frameless);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.frameless);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n         *\r\n         * @param {Event} event Focus event\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bringToFront(event, instance){\r\n            \r\n            // Do not bring to front if preceeded by an open modal\r\n            var index = openDialogs.indexOf(instance);\r\n            for(var x=index+1;x<openDialogs.length;x+=1){\r\n                if(openDialogs[x].isModal()){\r\n                    return;\r\n                }\r\n            }\r\n\t\t\t\r\n            // Bring to front by making it the last child.\r\n            if(document.body.lastChild !== instance.elements.root){\r\n                document.body.appendChild(instance.elements.root);\r\n                //also make sure its at the end of the list\r\n                openDialogs.splice(openDialogs.indexOf(instance),1);\r\n                openDialogs.push(instance);\r\n                setFocus(instance);\r\n            }\r\n\t\t\t\r\n            return false;\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{undefined}\t\r\n         */\r\n        function optionUpdated(instance, option, oldValue, newValue){\r\n            switch(option){\r\n            case 'title':\r\n                instance.setHeader(newValue);\r\n                break;\r\n            case 'modal':\r\n                updateDisplayMode(instance);\r\n                break;\r\n            case 'basic':\r\n                updateBasicMode(instance);\r\n                break;\r\n            case 'frameless':\r\n                updateFramelessMode(instance);\r\n                break;\r\n            case 'pinned':\r\n                updatePinned(instance);\r\n                break;\r\n            case 'closable':\r\n                updateClosable(instance);\r\n                break;\r\n            case 'maximizable':\r\n                updateMaximizable(instance);\r\n                break;\r\n            case 'pinnable':\r\n                updatePinnable(instance);\r\n                break;\r\n            case 'movable':\r\n                updateMovable(instance);\r\n                break;\r\n            case 'resizable':\r\n                updateResizable(instance);\r\n                break;\r\n            case 'padding':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noPadding);\r\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\r\n                    addClass(instance.elements.root, classes.noPadding);\r\n                }\r\n                break;\r\n            case 'overflow':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noOverflow);\r\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\r\n                    addClass(instance.elements.root, classes.noOverflow);\r\n                }\r\n                break;\r\n            case 'transition':\r\n                updateTransition(instance,newValue, oldValue);\r\n                break;\r\n            }\r\n\r\n            // internal on option updated event\r\n            if(typeof instance.hooks.onupdate === 'function'){\r\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Object} obj The object to set/get a value on/from.\r\n         * @param {Function} callback The callback function to call if the key was found.\r\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{Object} result object \r\n         *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n         *\t\tGET: \r\n         *\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t- value: the property value.\r\n         *\t\tSET:\r\n         *\t\t- items: a list of key value pairs of the properties being set.\r\n         *\t\t\t\teach contains:\r\n         *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t\t\t\t- key: the property key.\r\n         *\t\t\t\t\t- value: the property value.\r\n         */\r\n        function update(instance, obj, callback, key, value){\r\n            var result = {op:undefined, items: [] };\r\n            if(typeof value === 'undefined' && typeof key === 'string') {\r\n                //get\r\n                result.op = 'get';\r\n                if(obj.hasOwnProperty(key)){\r\n                    result.found = true;\r\n                    result.value = obj[key];\r\n                }else{\r\n                    result.found = false;\r\n                    result.value = undefined;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var old;\r\n                //set\r\n                result.op = 'set';\r\n                if(typeof key === 'object'){\r\n                    //set multiple\r\n                    var args = key;\r\n                    for (var prop in args) {\r\n                        if (obj.hasOwnProperty(prop)) {\r\n                            if(obj[prop] !== args[prop]){\r\n                                old = obj[prop];\r\n                                obj[prop] = args[prop];\r\n                                callback.call(instance,prop, old, args[prop]);\r\n                            }\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\r\n                        }else{\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\r\n                        }\r\n                    }\r\n                } else if (typeof key === 'string'){\r\n                    //set single\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        if(obj[key] !== value){\r\n                            old  = obj[key];\r\n                            obj[key] = value;\r\n                            callback.call(instance,key, old, value);\r\n                        }\r\n                        result.items.push({'key': key, 'value': value , 'found':true});\r\n\r\n                    }else{\r\n                        result.items.push({'key': key, 'value': value , 'found':false});\r\n                    }\r\n                } else {\r\n                    //invalid params\r\n                    throw new Error('args must be a string or object');\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n        /**\r\n         * Triggers a close event.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function triggerClose(instance) {\r\n            var found;\r\n            triggerCallback(instance, function (button) {\r\n                return found = instance.get('invokeOnCloseOff') !== true && (button.invokeOnClose === true);\r\n            });\r\n            //none of the buttons registered as onclose callback\r\n            //close the dialog\r\n            if (!found && instance.isOpen()) {\r\n                instance.close();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Dialogs commands event handler, attached to the dialog commands element.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function commandsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            switch (target) {\r\n            case instance.elements.commands.pin:\r\n                if (!instance.isPinned()) {\r\n                    pin(instance);\r\n                } else {\r\n                    unpin(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.maximize:\r\n                if (!instance.isMaximized()) {\r\n                    maximize(instance);\r\n                } else {\r\n                    restore(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.close:\r\n                triggerClose(instance);\r\n                break;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper: pins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dialog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function pin(instance) {\r\n            //pin the dialog\r\n            instance.set('pinned', true);\r\n        }\r\n\r\n        /**\r\n         * Helper: unpins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function unpin(instance) {\r\n            //unpin the dialog \r\n            instance.set('pinned', false);\r\n        }\r\n\r\n\r\n        /**\r\n         * Helper: enlarges the dialog to fill the entire screen.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function maximize(instance) {\r\n            // allow custom `onmaximize` method\r\n            dispatchEvent('onmaximize', instance);\r\n            //maximize the dialog \r\n            addClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onmaximized` method\r\n            dispatchEvent('onmaximized', instance);\r\n        }\r\n\r\n        /**\r\n         * Helper: returns the dialog to its former size.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function restore(instance) {\r\n            // allow custom `onrestore` method\r\n            dispatchEvent('onrestore', instance);\r\n            //maximize the dialog \r\n            removeClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onrestored` method\r\n            dispatchEvent('onrestored', instance);\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinnable(instance) {\r\n            if (instance.get('pinnable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.pinnable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.pinnable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper: Fixes the absolutly positioned modal div position.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function addAbsPositionFix(instance) {\r\n            var scrollLeft = getScrollLeft();\r\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\r\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\r\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\r\n        }\r\n\r\n        /**\r\n         * Helper: Removes the absolutly positioned modal div position fix.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function removeAbsPositionFix(instance) {\r\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\r\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\r\n            instance.elements.modal.style.marginTop = '';\r\n            instance.elements.modal.style.marginLeft = '';\r\n            instance.elements.modal.style.marginRight = '';\r\n\r\n            if (instance.isOpen()) {\r\n                var top = 0,\r\n                    left = 0\r\n                ;\r\n                if (instance.elements.dialog.style.top !== '') {\r\n                    top = parseInt(instance.elements.dialog.style.top, 10);\r\n                }\r\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\r\n\r\n                if (instance.elements.dialog.style.left !== '') {\r\n                    left = parseInt(instance.elements.dialog.style.left, 10);\r\n                }\r\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\r\n            }\r\n        }\r\n        /**\r\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateAbsPositionFix(instance) {\r\n            // if modeless and unpinned add fix\r\n            if (!instance.get('modal') && !instance.get('pinned')) {\r\n                addAbsPositionFix(instance);\r\n            } else {\r\n                removeAbsPositionFix(instance);\r\n            }\r\n        }\r\n        /**\r\n         * Toggles the dialog position lock | modeless only.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to make it modal, false otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinned(instance) {\r\n            if (instance.get('pinned')) {\r\n                removeClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen()) {\r\n                    removeAbsPositionFix(instance);\r\n                }\r\n            } else {\r\n                addClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen() && !instance.isModal()) {\r\n                    addAbsPositionFix(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMaximizable(instance) {\r\n            if (instance.get('maximizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.maximizable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.maximizable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the close box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateClosable(instance) {\r\n            if (instance.get('closable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.closable);\r\n                bindClosableEvents(instance);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.closable);\r\n                unbindClosableEvents(instance);\r\n            }\r\n        }\r\n\r\n        \r\n        var cancelClick = false,// flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\r\n            modalClickHandlerTS=0 // stores last click timestamp to prevent executing the handler twice on double click.\r\n            ;\r\n\r\n        /**\r\n         * Helper: closes the modal dialog when clicking the modal\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function modalClickHandler(event, instance) {\r\n            if(event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick){\r\n                var target = event.srcElement || event.target;\r\n                if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\r\n                    triggerClose(instance);\r\n                }\r\n                cancelClick = false;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // stores last call timestamp to prevent triggering the callback twice.\r\n        var callbackTS = 0;\r\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\r\n        var cancelKeyup = false;\r\n        /** \r\n         * Helper: triggers a button callback\r\n         *\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * @param {Function}\tCallback to check which button triggered the event.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function triggerCallback(instance, check) {\r\n            if(Date.now() - callbackTS > 200 && (callbackTS = Date.now())){\r\n                for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\r\n                    var button = instance.__internal.buttons[idx];\r\n                    if (!button.element.disabled && check(button)) {\r\n                        var closeEvent = createCloseEvent(idx, button);\r\n                        if (typeof instance.callback === 'function') {\r\n                            instance.callback.apply(instance, [closeEvent]);\r\n                        }\r\n                        //close the dialog only if not canceled.\r\n                        if (closeEvent.cancel === false) {\r\n                            instance.close();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clicks event handler, attached to the dialog footer.\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function buttonsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            triggerCallback(instance, function (button) {\r\n                // if this button caused the click, cancel keyup event\r\n                return button.element === target && (cancelKeyup = true);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Keyup event handler, attached to the document.body\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function keyupHandler(event) {\r\n            //hitting enter while button has focus will trigger keyup too.\r\n            //ignore if handled by clickHandler\r\n            if (cancelKeyup) {\r\n                cancelKeyup = false;\r\n                return;\r\n            }\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\r\n                triggerClose(instance);\r\n                return false;\r\n            }else if (usedKeys.indexOf(keyCode) > -1) {\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        /**\r\n        * Keydown event handler, attached to the document.body\r\n        *\r\n        * @param {Event}\t\tDOM event object.\r\n        * @param {Object}\t\tThe dilog instance.\r\n        * \r\n        * @return {undefined}\r\n        */\r\n        function keydownHandler(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\r\n                var buttons = instance.__internal.buttons;\r\n                for (var x = 0; x < buttons.length; x += 1) {\r\n                    if (document.activeElement === buttons[x].element) {\r\n                        switch (keyCode) {\r\n                        case keys.LEFT:\r\n                            buttons[(x || buttons.length) - 1].element.focus();\r\n                            return;\r\n                        case keys.RIGHT:\r\n                            buttons[(x + 1) % buttons.length].element.focus();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Sets focus to proper dialog element\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function setFocus(instance, resetTarget) {\r\n            // reset target has already been determined.\r\n            if (resetTarget) {\r\n                resetTarget.focus();\r\n            } else {\r\n                // current instance focus settings\r\n                var focus = instance.__internal.focus;\r\n                // the focus element.\r\n                var element = focus.element;\r\n\r\n                switch (typeof focus.element) {\r\n                // a number means a button index\r\n                case 'number':\r\n                    if (instance.__internal.buttons.length > focus.element) {\r\n                        //in basic view, skip focusing the buttons.\r\n                        if (instance.get('basic') === true) {\r\n                            element = instance.elements.reset[0];\r\n                        } else {\r\n                            element = instance.__internal.buttons[focus.element].element;\r\n                        }\r\n                    }\r\n                    break;\r\n                // a string means querySelector to select from dialog body contents.\r\n                case 'string':\r\n                    element = instance.elements.body.querySelector(focus.element);\r\n                    break;\r\n                // a function should return the focus element.\r\n                case 'function':\r\n                    element = focus.element.call(instance);\r\n                    break;\r\n                }\r\n\r\n                // if no focus element, default to first reset element.\r\n                if (instance.get('defaultFocusOff') === true || ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0)) {\r\n                    element = instance.elements.reset[0];\r\n                }\r\n                // focus\r\n                if (element && element.focus) {\r\n                    element.focus();\r\n                    // if selectable\r\n                    if (focus.select && element.select) {\r\n                        element.select();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Focus event handler, attached to document.body and dialogs own reset links.\r\n         * handles the focus for modal dialogs only.\r\n         *\r\n         * @param {Event} event DOM focus event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function onReset(event, instance) {\r\n\r\n            // should work on last modal if triggered from document.body \r\n            if (!instance) {\r\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\r\n                    if (openDialogs[x].isModal()) {\r\n                        instance = openDialogs[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(instance) {\r\n                // if modal\r\n                if (instance.isModal()) {\r\n                    // determine reset target to enable forward/backward tab cycle.\r\n                    var firstReset = instance.elements.reset[0],\r\n                        lastReset = instance.elements.reset[1],\r\n                        lastFocusedElement = event.relatedTarget,\r\n                        within = instance.elements.root.contains(lastFocusedElement),\r\n                        target = event.srcElement || event.target,\r\n                        resetTarget;\r\n\r\n                    //if the previous focused element element was outside the modal do nthing\r\n                    if(  /*first show */\r\n                        (target === firstReset && !within) ||\r\n                         /*focus cycle */\r\n                        (target === lastReset && lastFocusedElement == firstReset))\r\n                        return\r\n                    else if(target === lastReset || target === document.body)\r\n                        resetTarget = firstReset\r\n                    else if(target === firstReset && lastFocusedElement == lastReset){\r\n                        resetTarget = findTabbable(instance)\r\n                    }else if(target == firstReset && within){\r\n                        resetTarget = findTabbable(instance, true)\r\n                    }\r\n                    // focus\r\n                    setFocus(instance, resetTarget);\r\n                }\r\n            }\r\n        }\r\n        function findTabbable(instance, last){\r\n            var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\r\n            last && tabbables.reverse()\r\n            for(var x=0;x<tabbables.length;x++){\r\n                var tabbable = tabbables[x]\r\n                //check if visible\r\n                if(!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)){\r\n                    return tabbable\r\n                }\r\n            }\r\n        }\r\n        function recycleTab(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            if (instance && event.shiftKey && event.keyCode === keys.TAB) {\r\n                instance.elements.reset[1].focus()\r\n            }\r\n        }\r\n        /**\r\n         * Transition in transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionInEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerIn);\r\n\r\n            // once transition is complete, set focus\r\n            setFocus(instance);\r\n\r\n            //restore scroll to prevent document jump\r\n            restoreScrollPosition();\r\n\r\n            // allow handling key up after transition ended.\r\n            cancelKeyup = false;\r\n\r\n            // allow custom `onfocus` method\r\n            dispatchEvent('onfocus', instance);\r\n\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            removeClass(instance.elements.root, classes.animationIn);\r\n        }\r\n\r\n        /**\r\n         * Transition out transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionOutEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerOut);\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // reset move updates\r\n            resetMove(instance);\r\n            // reset resize updates\r\n            resetResize(instance);\r\n\r\n            // restore if maximized\r\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\r\n                restore(instance);\r\n            }\r\n\r\n            // return focus to the last active element\r\n            if (alertify.defaults.maintainFocus && instance.__internal.activeElement) {\r\n                instance.__internal.activeElement.focus();\r\n                instance.__internal.activeElement = null;\r\n            }\r\n            \r\n            //destory the instance\r\n            if (typeof instance.__internal.destroy === 'function') {\r\n                instance.__internal.destroy.apply(instance);\r\n            }\r\n        }\r\n        /* Controls moving a dialog around */\r\n        //holde the current moving instance\r\n        var movable = null,\r\n            //holds the current X offset when move starts\r\n            offsetX = 0,\r\n            //holds the current Y offset when move starts\r\n            offsetY = 0,\r\n            xProp = 'pageX',\r\n            yProp = 'pageY',\r\n            bounds = null,\r\n            refreshTop = false,\r\n            moveDelegate = null\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element top/left coordinates\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElement(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n           \r\n            element.style.left = left + 'px';\r\n            element.style.top = top + 'px';\r\n           \r\n        }\r\n        /**\r\n         * Helper: sets the element top/left coordinates within screen bounds\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElementBounded(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n            \r\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\r\n            if(refreshTop){\r\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\r\n            }else{\r\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\r\n            }\r\n        }\r\n            \r\n\r\n        /**\r\n         * Triggers the start of a move event, attached to the header element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginMove(event, instance) {\r\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\r\n                var eventSrc, left=0, top=0;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                    xProp = 'clientX';\r\n                    yProp = 'clientY';\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n\r\n                if (eventSrc) {\r\n\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n\r\n                    if (element.style.left) {\r\n                        left = parseInt(element.style.left, 10);\r\n                    }\r\n\r\n                    if (element.style.top) {\r\n                        top = parseInt(element.style.top, 10);\r\n                    }\r\n                    \r\n                    offsetX = eventSrc[xProp] - left;\r\n                    offsetY = eventSrc[yProp] - top;\r\n\r\n                    if(instance.isModal()){\r\n                        offsetY += instance.elements.modal.scrollTop;\r\n                    }else if(instance.isPinned()){\r\n                        offsetY -= document.body.scrollTop;\r\n                    }\r\n                    \r\n                    if(instance.get('moveBounded')){\r\n                        var current = element,\r\n                            offsetLeft = -left,\r\n                            offsetTop = -top;\r\n                        \r\n                        //calc offset\r\n                        do {\r\n                            offsetLeft += current.offsetLeft;\r\n                            offsetTop += current.offsetTop;\r\n                        } while (current = current.offsetParent);\r\n                        \r\n                        bounds = {\r\n                            maxLeft : offsetLeft,\r\n                            minLeft : -offsetLeft,\r\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\r\n                            minTop  : -offsetTop\r\n                        };\r\n                        moveDelegate = moveElementBounded;\r\n                    }else{\r\n                        bounds = null;\r\n                        moveDelegate = moveElement;\r\n                    }\r\n                    \r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', instance);\r\n\r\n                    refreshTop = !instance.isModal() && instance.isPinned();\r\n                    movable = instance;\r\n                    moveDelegate(eventSrc, element);\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual move handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function move(event) {\r\n            if (movable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    moveDelegate(eventSrc, movable.elements.dialog);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a move event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endMove() {\r\n            if (movable) {\r\n                var instance = movable;\r\n                movable = bounds = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                // allow custom `onmoved` method\r\n                dispatchEvent('onmoved', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by moving the element to its original state,\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetMove(instance) {\r\n            movable = null;\r\n            var element = instance.elements.dialog;\r\n            element.style.left = element.style.top = '';\r\n        }\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMovable(instance) {\r\n            if (instance.get('movable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    bindMovableEvents(instance);\r\n                }\r\n            } else {\r\n\r\n                //reset\r\n                resetMove(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    unbindMovableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Controls moving a dialog around */\r\n        //holde the current instance being resized\t\t\r\n        var resizable = null,\r\n            //holds the staring left offset when resize starts.\r\n            startingLeft = Number.Nan,\r\n            //holds the staring width when resize starts.\r\n            startingWidth = 0,\r\n            //holds the initial width when resized for the first time.\r\n            minWidth = 0,\r\n            //holds the offset of the resize handle.\r\n            handleOffset = 0\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n         *\r\n         * @param {Event} event\tDOM mousemove event object.\r\n         * @param {Node} element The element being moved.\r\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resizeElement(event, element, pageRelative) {\r\n\r\n            //calculate offsets from 0,0\r\n            var current = element;\r\n            var offsetLeft = 0;\r\n            var offsetTop = 0;\r\n            do {\r\n                offsetLeft += current.offsetLeft;\r\n                offsetTop += current.offsetTop;\r\n            } while (current = current.offsetParent);\r\n\r\n            // determine X,Y coordinates.\r\n            var X, Y;\r\n            if (pageRelative === true) {\r\n                X = event.pageX;\r\n                Y = event.pageY;\r\n            } else {\r\n                X = event.clientX;\r\n                Y = event.clientY;\r\n            }\r\n            // rtl handling\r\n            var isRTL = isRightToLeft();\r\n            if (isRTL) {\r\n                // reverse X \r\n                X = document.body.offsetWidth - X;\r\n                // if has a starting left, calculate offsetRight\r\n                if (!isNaN(startingLeft)) {\r\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\r\n                }\r\n            }\r\n\r\n            // set width/height\r\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\r\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\r\n\r\n            // if the element being resized has a starting left, maintain it.\r\n            // the dialog is centered, divide by half the offset to maintain the margins.\r\n            if (!isNaN(startingLeft)) {\r\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\r\n                if (isRTL) {\r\n                    //negate the diff, why?\r\n                    //when growing it should decrease left\r\n                    //when shrinking it should increase left\r\n                    diff *= -1;\r\n                }\r\n                if (element.offsetWidth > startingWidth) {\r\n                    //growing\r\n                    element.style.left = (startingLeft + diff) + 'px';\r\n                } else if (element.offsetWidth >= minWidth) {\r\n                    //shrinking\r\n                    element.style.left = (startingLeft - diff) + 'px';\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginResize(event, instance) {\r\n            if (!instance.isMaximized()) {\r\n                var eventSrc;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', instance);\r\n                    \r\n                    resizable = instance;\r\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n                    startingLeft = parseInt(element.style.left, 10);\r\n                    element.style.height = element.offsetHeight + 'px';\r\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\r\n\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual resize handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resize(event) {\r\n            if (resizable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endResize() {\r\n            if (resizable) {\r\n                var instance = resizable;\r\n                resizable = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                cancelClick = true;\r\n                // allow custom `onresized` method\r\n                dispatchEvent('onresized', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by resizing the element to its original state.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetResize(instance) {\r\n            resizable = null;\r\n            var element = instance.elements.dialog;\r\n            if (element.style.maxWidth === 'none') {\r\n                //clear inline styles.\r\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\r\n                //reset variables.\r\n                startingLeft = Number.Nan;\r\n                startingWidth = minWidth = handleOffset = 0;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateResizable(instance) {\r\n            if (instance.get('resizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    bindResizableEvents(instance);\r\n                }\r\n            } else {\r\n                //reset\r\n                resetResize(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    unbindResizableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reset move/resize on window resize.\r\n         *\r\n         * @param {Event} event\twindow resize event object.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function windowResize(/*event*/) {\r\n            for (var x = 0; x < openDialogs.length; x += 1) {\r\n                var instance = openDialogs[x];\r\n                if (instance.get('autoReset')) {\r\n                    resetMove(instance);\r\n                    resetResize(instance);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Bind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindEvents(instance) {\r\n            // if first dialog, hook global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                on(window, 'resize', windowResize);\r\n                on(document.body, 'keyup', keyupHandler);\r\n                on(document.body, 'keydown', keydownHandler);\r\n                on(document.body, 'focus', onReset);\r\n\r\n                //move\r\n                on(document.documentElement, 'mousemove', move);\r\n                on(document.documentElement, 'touchmove', move);\r\n                on(document.documentElement, 'mouseup', endMove);\r\n                on(document.documentElement, 'touchend', endMove);\r\n                //resize\r\n                on(document.documentElement, 'mousemove', resize);\r\n                on(document.documentElement, 'touchmove', resize);\r\n                on(document.documentElement, 'mouseup', endResize);\r\n                on(document.documentElement, 'touchend', endResize);\r\n            }\r\n\r\n            // common events\r\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            on(instance.elements.reset[0], 'keydown', recycleTab);\r\n            on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            //prevent handling key up when dialog is being opened by a key stroke.\r\n            cancelKeyup = true;\r\n            // hook in transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                bindModelessEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                bindResizableEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                bindMovableEvents(instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unbind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindEvents(instance) {\r\n            // if last dialog, remove global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                off(window, 'resize', windowResize);\r\n                off(document.body, 'keyup', keyupHandler);\r\n                off(document.body, 'keydown', keydownHandler);\r\n                off(document.body, 'focus', onReset);\r\n                //move\r\n                off(document.documentElement, 'mousemove', move);\r\n                off(document.documentElement, 'mouseup', endMove);\r\n                //resize\r\n                off(document.documentElement, 'mousemove', resize);\r\n                off(document.documentElement, 'mouseup', endResize);\r\n            }\r\n\r\n            // common events\r\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            off(instance.elements.reset[0], 'keydown', recycleTab);\r\n            off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            // hook out transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                unbindModelessEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                unbindMovableEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                unbindResizableEvents(instance);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Bind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindModelessEvents(instance) {\r\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n        /**\r\n         * Unbind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindModelessEvents(instance) {\r\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindMovableEvents(instance) {\r\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindMovableEvents(instance) {\r\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindResizableEvents(instance) {\r\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindResizableEvents(instance) {\r\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);\r\n        }\r\n\r\n        /**\r\n         * Bind closable events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindClosableEvents(instance) {\r\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind closable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindClosableEvents(instance) {\r\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n        // dialog API\r\n        return {\r\n            __init:initialize,\r\n            /**\r\n             * Check if dialog is currently open\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isOpen: function () {\r\n                return this.__internal.isOpen;\r\n            },\r\n            isModal: function (){\r\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\r\n            },\r\n            isMaximized:function(){\r\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\r\n            },\r\n            isPinned:function(){\r\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\r\n            },\r\n            maximize:function(){\r\n                if(!this.isMaximized()){\r\n                    maximize(this);\r\n                }\r\n                return this;\r\n            },\r\n            restore:function(){\r\n                if(this.isMaximized()){\r\n                    restore(this);\r\n                }\r\n                return this;\r\n            },\r\n            pin:function(){\r\n                if(!this.isPinned()){\r\n                    pin(this);\r\n                }\r\n                return this;\r\n            },\r\n            unpin:function(){\r\n                if(this.isPinned()){\r\n                    unpin(this);\r\n                }\r\n                return this;\r\n            },\r\n            bringToFront:function(){\r\n                bringToFront(null, this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Move the dialog to a specific x/y coordinates\r\n             *\r\n             * @param {Number} x    The new dialog x coordinate in pixels.\r\n             * @param {Number} y    The new dialog y coordinate in pixels.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            moveTo:function(x,y){\r\n                if(!isNaN(x) && !isNaN(y)){\r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', this);\r\n                    \r\n                    var element = this.elements.dialog,\r\n                        current = element,\r\n                        offsetLeft = 0,\r\n                        offsetTop = 0;\r\n                    \r\n                    //subtract existing left,top\r\n                    if (element.style.left) {\r\n                        offsetLeft -= parseInt(element.style.left, 10);\r\n                    }\r\n                    if (element.style.top) {\r\n                        offsetTop -= parseInt(element.style.top, 10);\r\n                    }\r\n                    //calc offset\r\n                    do {\r\n                        offsetLeft += current.offsetLeft;\r\n                        offsetTop += current.offsetTop;\r\n                    } while (current = current.offsetParent);\r\n\r\n                    //calc left, top\r\n                    var left = (x - offsetLeft);\r\n                    var top  = (y - offsetTop);\r\n\r\n                    //// rtl handling\r\n                    if (isRightToLeft()) {\r\n                        left *= -1;\r\n                    }\r\n\r\n                    element.style.left = left + 'px';\r\n                    element.style.top = top + 'px';\r\n                    \r\n                    // allow custom `onmoved` method\r\n                    dispatchEvent('onmoved', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n             * The dialog can be resized to:\r\n             *  A minimum width equal to the initial display width\r\n             *  A minimum height equal to the sum of header/footer heights.\r\n             *\r\n             *\r\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            resizeTo:function(width,height){\r\n                var w = parseFloat(width),\r\n                    h = parseFloat(height),\r\n                    regex = /(\\d*\\.\\d+|\\d+)%/\r\n                ;\r\n\r\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\r\n                    \r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', this);\r\n                    \r\n                    if(('' + width).match(regex)){\r\n                        w = w / 100 * document.documentElement.clientWidth ;\r\n                    }\r\n\r\n                    if(('' + height).match(regex)){\r\n                        h = h / 100 * document.documentElement.clientHeight;\r\n                    }\r\n\r\n                    var element = this.elements.dialog;\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = w + 'px';\r\n                    element.style.height = h + 'px';\r\n                    \r\n                    // allow custom `onresized` method\r\n                    dispatchEvent('onresized', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options \r\n             *\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting : function (key, value) {\r\n                var self = this;\r\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\r\n                if(result.op === 'get'){\r\n                    if(result.found){\r\n                        return result.value;\r\n                    }else if(typeof this.settings !== 'undefined'){\r\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\r\n                    }else{\r\n                        return undefined;\r\n                    }\r\n                }else if(result.op === 'set'){\r\n                    if(result.items.length > 0){\r\n                        var callback = this.settingUpdated || function(){};\r\n                        for(var x=0;x<result.items.length;x+=1){\r\n                            var item = result.items[x];\r\n                            if(!item.found && typeof this.settings !== 'undefined'){\r\n                                update(this, this.settings, callback, item.key, item.value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set:function(key, value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n            * Sets dialog header\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setHeader:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n            * Sets dialog contents\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setContent:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Show the dialog as modal\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            showModal: function(className){\r\n                return this.show(true, className);\r\n            },\r\n            /**\r\n             * Show the dialog\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            show: function (modal, className) {\r\n                \r\n                // ensure initialization\r\n                initialize(this);\r\n\r\n                if ( !this.__internal.isOpen ) {\r\n\r\n                    // add to open dialogs\r\n                    this.__internal.isOpen = true;\r\n                    openDialogs.push(this);\r\n\r\n                    // save last focused element\r\n                    if(alertify.defaults.maintainFocus){\r\n                        this.__internal.activeElement = document.activeElement;\r\n                    }\r\n\r\n                    // set tabindex attribute on body element this allows script to give it focusable\r\n                    if(!document.body.hasAttribute('tabindex')) {\r\n                        document.body.setAttribute( 'tabindex', tabindex = '0');\r\n                    }\r\n\r\n                    //allow custom dom manipulation updates before showing the dialog.\r\n                    if(typeof this.prepare === 'function'){\r\n                        this.prepare();\r\n                    }\r\n\r\n                    bindEvents(this);\r\n\r\n                    if(modal !== undefined){\r\n                        this.set('modal', modal);\r\n                    }\r\n\r\n                    //save scroll to prevent document jump\r\n                    saveScrollPosition();\r\n\r\n                    ensureNoOverflow();\r\n\r\n                    // allow custom dialog class on show\r\n                    if(typeof className === 'string' && className !== ''){\r\n                        this.__internal.className = className;\r\n                        addClass(this.elements.root, className);\r\n                    }\r\n\r\n                    // maximize if start maximized\r\n                    if ( this.get('startMaximized')) {\r\n                        this.maximize();\r\n                    }else if(this.isMaximized()){\r\n                        restore(this);\r\n                    }\r\n\r\n                    updateAbsPositionFix(this);\r\n                    this.elements.root.removeAttribute('style');\r\n                    removeClass(this.elements.root, classes.animationOut);\r\n                    addClass(this.elements.root, classes.animationIn);\r\n\r\n                    // set 1s fallback in case transition event doesn't fire\r\n                    clearTimeout( this.__internal.timerIn);\r\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\r\n\r\n                    if(isSafari){\r\n                        // force desktop safari reflow\r\n                        var root = this.elements.root;\r\n                        root.style.display  = 'none';\r\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\r\n                    }\r\n\r\n                    //reflow\r\n                    reflow = this.elements.root.offsetWidth;\r\n                  \r\n                    // show dialog\r\n                    removeClass(this.elements.root, classes.hidden);\r\n\r\n                    // internal on show event\r\n                    if(typeof this.hooks.onshow === 'function'){\r\n                        this.hooks.onshow.call(this);\r\n                    }\r\n\r\n                    // allow custom `onshow` method\r\n                    dispatchEvent('onshow', this);\r\n\r\n                }else{\r\n                    // reset move updates\r\n                    resetMove(this);\r\n                    // reset resize updates\r\n                    resetResize(this);\r\n                    // shake the dialog to indicate its already open\r\n                    addClass(this.elements.dialog, classes.shake);\r\n                    var self = this;\r\n                    setTimeout(function(){\r\n                        removeClass(self.elements.dialog, classes.shake);\r\n                    },200);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close the dialog\r\n             *\r\n             * @return {Object} The dialog instance\r\n             */\r\n            close: function () {\r\n                if (this.__internal.isOpen ) {\r\n                    // custom `onclosing` event\r\n                    if(dispatchEvent('onclosing', this) !== false){\r\n\r\n                        unbindEvents(this);\r\n\r\n                        removeClass(this.elements.root, classes.animationIn);\r\n                        addClass(this.elements.root, classes.animationOut);\r\n\r\n                        // set 1s fallback in case transition event doesn't fire\r\n                        clearTimeout( this.__internal.timerOut );\r\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\r\n                        // hide dialog\r\n                        addClass(this.elements.root, classes.hidden);\r\n                        //reflow\r\n                        reflow = this.elements.modal.offsetWidth;\r\n\r\n                        // remove custom dialog class on hide\r\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\r\n                            removeClass(this.elements.root, this.__internal.className);\r\n                        }\r\n\r\n                        // internal on close event\r\n                        if(typeof this.hooks.onclose === 'function'){\r\n                            this.hooks.onclose.call(this);\r\n                        }\r\n\r\n                        // allow custom `onclose` method\r\n                        dispatchEvent('onclose', this);\r\n\r\n                        //remove from open dialogs\r\n                        openDialogs.splice(openDialogs.indexOf(this),1);\r\n                        this.__internal.isOpen = false;\r\n\r\n                        ensureNoOverflow();\r\n                    }\r\n\r\n                }\r\n                // last dialog and tab index was set by us, remove it.\r\n                if(!openDialogs.length && tabindex === '0'){\r\n                    document.body.removeAttribute('tabindex');\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close all open dialogs except this.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeOthers:function(){\r\n                alertify.closeAll(this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Destroys this dialog instance\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            destroy:function(){\r\n                if(this.__internal) {\r\n                    if (this.__internal.isOpen ) {\r\n                        //mark dialog for destruction, this will be called on tranistionOut event.\r\n                        this.__internal.destroy = function(){\r\n                            destruct(this, initialize);\r\n                        };\r\n                        //close the dialog to unbind all events.\r\n                        this.close();\r\n                    }else if(!this.__internal.destroy){\r\n                        destruct(this, initialize);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n\t} () );\r\n    var notifier = (function () {\r\n        var reflow,\r\n            element,\r\n            openInstances = [],\r\n            classes = defaults.notifier.classes;\r\n        /**\r\n         * Helper: initializes the notifier instance\r\n         *\r\n         */\r\n        function initialize(instance) {\r\n\r\n            if (!instance.__internal) {\r\n                instance.__internal = {\r\n                    position: alertify.defaults.notifier.position,\r\n                    delay: alertify.defaults.notifier.delay,\r\n                };\r\n\r\n                element = document.createElement('DIV');\r\n\r\n                updatePosition(instance);\r\n            }\r\n\r\n            //add to DOM tree.\r\n            if (element.parentNode !== document.body) {\r\n                document.body.appendChild(element);\r\n            }\r\n        }\r\n\r\n        function pushInstance(instance) {\r\n            instance.__internal.pushed = true;\r\n            openInstances.push(instance);\r\n        }\r\n        function popInstance(instance) {\r\n            openInstances.splice(openInstances.indexOf(instance), 1);\r\n            instance.__internal.pushed = false;\r\n        }\r\n        /**\r\n         * Helper: update the notifier instance position\r\n         *\r\n         */\r\n        function updatePosition(instance) {\r\n            element.className = classes.base;\r\n            switch (instance.__internal.position) {\r\n            case 'top-right':\r\n                addClass(element, classes.top + ' ' + classes.right);\r\n                break;\r\n            case 'top-left':\r\n                addClass(element, classes.top + ' ' + classes.left);\r\n                break;\r\n            case 'top-center':\r\n                addClass(element, classes.top + ' ' + classes.center);\r\n                break;\r\n            case 'bottom-left':\r\n                addClass(element, classes.bottom + ' ' + classes.left);\r\n                break;\r\n            case 'bottom-center':\r\n                addClass(element, classes.bottom + ' ' + classes.center);\r\n                break;\r\n\r\n            default:\r\n            case 'bottom-right':\r\n                addClass(element, classes.bottom + ' ' + classes.right);\r\n                break;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * creates a new notification message\r\n        *\r\n        * @param  {DOMElement} message\tThe notifier message element\r\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n        *\r\n        * @return {undefined}\r\n        */\r\n        function create(div, callback) {\r\n\r\n            function clickDelegate(event, instance) {\r\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\r\n                    instance.dismiss(true);\r\n                }\r\n            }\r\n\r\n            function transitionDone(event, instance) {\r\n                // unbind event\r\n                off(instance.element, transition.type, transitionDone);\r\n                // remove the message\r\n                element.removeChild(instance.element);\r\n            }\r\n\r\n            function initialize(instance) {\r\n                if (!instance.__internal) {\r\n                    instance.__internal = {\r\n                        pushed: false,\r\n                        delay : undefined,\r\n                        timer: undefined,\r\n                        clickHandler: undefined,\r\n                        transitionEndHandler: undefined,\r\n                        transitionTimeout: undefined\r\n                    };\r\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\r\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\r\n                }\r\n                return instance;\r\n            }\r\n            function clearTimers(instance) {\r\n                clearTimeout(instance.__internal.timer);\r\n                clearTimeout(instance.__internal.transitionTimeout);\r\n            }\r\n            return initialize({\r\n                /* notification DOM element*/\r\n                element: div,\r\n                /*\r\n                 * Pushes a notification message\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                push: function (_content, _wait) {\r\n                    if (!this.__internal.pushed) {\r\n\r\n                        pushInstance(this);\r\n                        clearTimers(this);\r\n\r\n                        var content, wait;\r\n                        switch (arguments.length) {\r\n                        case 0:\r\n                            wait = this.__internal.delay;\r\n                            break;\r\n                        case 1:\r\n                            if (typeof (_content) === 'number') {\r\n                                wait = _content;\r\n                            } else {\r\n                                content = _content;\r\n                                wait = this.__internal.delay;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            content = _content;\r\n                            wait = _wait;\r\n                            break;\r\n                        }\r\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\r\n                        // set contents\r\n                        if (typeof content !== 'undefined') {\r\n                            this.setContent(content);\r\n                        }\r\n                        // append or insert\r\n                        if (notifier.__internal.position.indexOf('top') < 0) {\r\n                            element.appendChild(this.element);\r\n                        } else {\r\n                            element.insertBefore(this.element, element.firstChild);\r\n                        }\r\n                        reflow = this.element.offsetWidth;\r\n                        addClass(this.element, classes.visible);\r\n                        // attach click event\r\n                        on(this.element, 'click', this.__internal.clickHandler);\r\n                        return this.delay(wait);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * {Function} callback function to be invoked before dismissing the notification message.\r\n                 * Remarks: A return value === 'false' will cancel the dismissal\r\n                 *\r\n                 */\r\n                ondismiss: function () { },\r\n                /*\r\n                 * {Function} callback function to be invoked when the message is dismissed.\r\n                 *\r\n                 */\r\n                callback: callback,\r\n                /*\r\n                 * Dismisses the notification message\r\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                 *\r\n                 */\r\n                dismiss: function (clicked) {\r\n                    if (this.__internal.pushed) {\r\n                        clearTimers(this);\r\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\r\n                            //detach click event\r\n                            off(this.element, 'click', this.__internal.clickHandler);\r\n                            // ensure element exists\r\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\r\n                                //transition end or fallback\r\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\r\n                                removeClass(this.element, classes.visible);\r\n\r\n                                // custom callback on dismiss\r\n                                if (typeof this.callback === 'function') {\r\n                                    this.callback.call(this, clicked);\r\n                                }\r\n                            }\r\n                            popInstance(this);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Delays the notification message dismissal\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                delay: function (wait) {\r\n                    clearTimers(this);\r\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\r\n                    if (this.__internal.delay > 0) {\r\n                        var  self = this;\r\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Sets the notification message contents\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 *\r\n                 */\r\n                setContent: function (content) {\r\n                    if (typeof content === 'string') {\r\n                        clearContents(this.element);\r\n                        this.element.innerHTML = content;\r\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\r\n                        clearContents(this.element);\r\n                        this.element.appendChild(content);\r\n                    }\r\n                    if(this.__internal.closeButton){\r\n                        var close = document.createElement('span');\r\n                        addClass(close, classes.close);\r\n                        close.setAttribute('data-close', true);\r\n                        this.element.appendChild(close);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Dismisses all open notifications except this.\r\n                 *\r\n                 */\r\n                dismissOthers: function () {\r\n                    notifier.dismissAll(this);\r\n                    return this;\r\n                }\r\n            });\r\n        }\r\n\r\n        //notifier api\r\n        return {\r\n            /**\r\n             * Gets or Sets notifier settings.\r\n             *\r\n             * @param {string} key The setting name\r\n             * @param {Variant} value The setting value.\r\n             *\r\n             * @return {Object}\tif the called as a setter, return the notifier instance.\r\n             */\r\n            setting: function (key, value) {\r\n                //ensure init\r\n                initialize(this);\r\n\r\n                if (typeof value === 'undefined') {\r\n                    //get\r\n                    return this.__internal[key];\r\n                } else {\r\n                    //set\r\n                    switch (key) {\r\n                    case 'position':\r\n                        this.__internal.position = value;\r\n                        updatePosition(this);\r\n                        break;\r\n                    case 'delay':\r\n                        this.__internal.delay = value;\r\n                        break;\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options\r\n             */\r\n            set:function(key,value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options\r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n             * Creates a new notification message\r\n             *\r\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            create: function (type, callback) {\r\n                //ensure notifier init\r\n                initialize(this);\r\n                //create new notification message\r\n                var div = document.createElement('div');\r\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ' + classes.prefix + type : '');\r\n                return create(div, callback);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications.\r\n             *\r\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n             *\r\n             */\r\n            dismissAll: function (except) {\r\n                var clone = openInstances.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var  instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.dismiss();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Alertify public API\r\n     * This contains everything that is exposed through the alertify object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function Alertify() {\r\n\r\n        // holds a references of created dialogs\r\n        var dialogs = {};\r\n\r\n        /**\r\n         * Extends a given prototype by merging properties from base into sub.\r\n         *\r\n         * @sub {Object} sub The prototype being overwritten.\r\n         * @base {Object} base The prototype being written.\r\n         *\r\n         * @return {Object} The extended prototype.\r\n         */\r\n        function extend(sub, base) {\r\n            // copy dialog pototype over definition.\r\n            for (var prop in base) {\r\n                if (base.hasOwnProperty(prop)) {\r\n                    sub[prop] = base[prop];\r\n                }\r\n            }\r\n            return sub;\r\n        }\r\n\r\n\r\n        /**\r\n        * Helper: returns a dialog instance from saved dialogs.\r\n        * and initializes the dialog if its not already initialized.\r\n        *\r\n        * @name {String} name The dialog name.\r\n        *\r\n        * @return {Object} The dialog instance.\r\n        */\r\n        function get_dialog(name) {\r\n            var dialog = dialogs[name].dialog;\r\n            //initialize the dialog if its not already initialized.\r\n            if (dialog && typeof dialog.__init === 'function') {\r\n                dialog.__init(dialog);\r\n            }\r\n            return dialog;\r\n        }\r\n\r\n        /**\r\n         * Helper:  registers a new dialog definition.\r\n         *\r\n         * @name {String} name The dialog name.\r\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n         * @base {String} base the name of another dialog to inherit from.\r\n         *\r\n         * @return {Object} The dialog definition.\r\n         */\r\n        function register(name, Factory, transient, base) {\r\n            var definition = {\r\n                dialog: null,\r\n                factory: Factory\r\n            };\r\n\r\n            //if this is based on an existing dialog, create a new definition\r\n            //by applying the new protoype over the existing one.\r\n            if (base !== undefined) {\r\n                definition.factory = function () {\r\n                    return extend(new dialogs[base].factory(), new Factory());\r\n                };\r\n            }\r\n\r\n            if (!transient) {\r\n                //create a new definition based on dialog\r\n                definition.dialog = extend(new definition.factory(), dialog);\r\n            }\r\n            return dialogs[name] = definition;\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * Alertify defaults\r\n             * \r\n             * @type {Object}\r\n             */\r\n            defaults: defaults,\r\n            /**\r\n             * Dialogs factory \r\n             *\r\n             * @param {string}      Dialog name.\r\n             * @param {Function}    A Dialog factory function.\r\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n             * @param {String}      The name of the base type to inherit from.\r\n             */\r\n            dialog: function (name, Factory, transient, base) {\r\n\r\n                // get request, create a new instance and return it.\r\n                if (typeof Factory !== 'function') {\r\n                    return get_dialog(name);\r\n                }\r\n\r\n                if (this.hasOwnProperty(name)) {\r\n                    throw new Error('alertify.dialog: name already exists');\r\n                }\r\n\r\n                // register the dialog\r\n                var definition = register(name, Factory, transient, base);\r\n\r\n                if (transient) {\r\n\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var instance = extend(new definition.factory(), dialog);\r\n                            //ensure init\r\n                            if (instance && typeof instance.__init === 'function') {\r\n                                instance.__init(instance);\r\n                            }\r\n                            instance['main'].apply(instance, arguments);\r\n                            return instance['show'].apply(instance);\r\n                        }\r\n                    };\r\n                } else {\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //ensure init\r\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\r\n                            definition.dialog.__init(definition.dialog);\r\n                        }\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var dialog = definition.dialog;\r\n                            dialog['main'].apply(definition.dialog, arguments);\r\n                            return dialog['show'].apply(definition.dialog);\r\n                        }\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * Close all open dialogs.\r\n             *\r\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeAll: function (except) {\r\n                var clone = openDialogs.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.close();\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n             *\r\n             * @param {string} name The dialog name.\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting: function (name, key, value) {\r\n\r\n                if (name === 'notifier') {\r\n                    return notifier.setting(key, value);\r\n                }\r\n\r\n                var dialog = get_dialog(name);\r\n                if (dialog) {\r\n                    return dialog.setting(key, value);\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set: function(name,key,value){\r\n                return this.setting(name, key,value);\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get: function(name, key){\r\n                return this.setting(name, key);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n             * This allows for custom look and feel for various types of notifications.\r\n             *\r\n             * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n             * @param  {String}                 [type='']\t\t\t\tType of log message\r\n             * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            notify: function (message, type, wait, callback) {\r\n                return notifier.create(type, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            message: function (message, wait, callback) {\r\n                return notifier.create(null, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'success'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            success: function (message, wait, callback) {\r\n                return notifier.create('success', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'error'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            error: function (message, wait, callback) {\r\n                return notifier.create('error', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'warning'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            warning: function (message, wait, callback) {\r\n                return notifier.create('warning', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            dismissAll: function () {\r\n                notifier.dismissAll();\r\n            }\r\n        };\r\n    }\r\n    var alertify = new Alertify();\r\n\r\n    /**\r\n    * Alert dialog definition\r\n    *\r\n    * invoked by:\r\n    *\talertify.alert(message);\r\n    *\talertify.alert(title, message);\r\n    *\talertify.alert(message, onok);\r\n    *\talertify.alert(title, message, onok);\r\n     */\r\n    alertify.dialog('alert', function () {\r\n        return {\r\n            main: function (_title, _message, _onok) {\r\n                var title, message, onok;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    if (typeof _message === 'function') {\r\n                        message = _title;\r\n                        onok = _message;\r\n                    } else {\r\n                        title = _title;\r\n                        message = _message;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.ok,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                // nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                onok: undefined,\r\n                label: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'label':\r\n                    if (this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue;\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                if (typeof this.get('onok') === 'function') {\r\n                    var returnValue = this.get('onok').call(this, closeEvent);\r\n                    if (typeof returnValue !== 'undefined') {\r\n                        closeEvent.cancel = !returnValue;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Confirm dialog object\r\n     *\r\n     *\talertify.confirm(message);\r\n     *\talertify.confirm(message, onok);\r\n     *\talertify.confirm(message, onok, oncancel);\r\n     *\talertify.confirm(title, message, onok, oncancel);\r\n     */\r\n    alertify.dialog('confirm', function () {\r\n\r\n        var autoConfirm = {\r\n            timer: null,\r\n            index: null,\r\n            text: null,\r\n            duration: null,\r\n            task: function (event, self) {\r\n                if (self.isOpen()) {\r\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\r\n                    autoConfirm.duration -= 1;\r\n                    if (autoConfirm.duration === -1) {\r\n                        clearAutoConfirm(self);\r\n                        var button = self.__internal.buttons[autoConfirm.index];\r\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\r\n\r\n                        if (typeof self.callback === 'function') {\r\n                            self.callback.apply(self, [closeEvent]);\r\n                        }\r\n                        //close the dialog.\r\n                        if (closeEvent.close !== false) {\r\n                            self.close();\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearAutoConfirm(self);\r\n                }\r\n            }\r\n        };\r\n\r\n        function clearAutoConfirm(self) {\r\n            if (autoConfirm.timer !== null) {\r\n                clearInterval(autoConfirm.timer);\r\n                autoConfirm.timer = null;\r\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\r\n            }\r\n        }\r\n\r\n        function startAutoConfirm(self, index, duration) {\r\n            clearAutoConfirm(self);\r\n            autoConfirm.duration = duration;\r\n            autoConfirm.index = index;\r\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\r\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\r\n            autoConfirm.task(null, self);\r\n        }\r\n\r\n\r\n        return {\r\n            main: function (_title, _message, _onok, _oncancel) {\r\n                var title, message, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 4:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                //nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: null,\r\n                labels: null,\r\n                onok: null,\r\n                oncancel: null,\r\n                defaultFocus: null,\r\n                reverseButtons: null,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'labels':\r\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].text = newValue.ok;\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].text = newValue.cancel;\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                case 'defaultFocus':\r\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                clearAutoConfirm(this);\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            autoOk: function (duration) {\r\n                startAutoConfirm(this, 0, duration);\r\n                return this;\r\n            },\r\n            autoCancel: function (duration) {\r\n                startAutoConfirm(this, 1, duration);\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Prompt dialog object\r\n     *\r\n     * invoked by:\r\n     *\talertify.prompt(message);\r\n     *\talertify.prompt(message, value);\r\n     *\talertify.prompt(message, value, onok);\r\n     *\talertify.prompt(message, value, onok, oncancel);\r\n     *\talertify.prompt(title, message, value, onok, oncancel);\r\n     */\r\n    alertify.dialog('prompt', function () {\r\n        var input = document.createElement('INPUT');\r\n        var p = document.createElement('P');\r\n        return {\r\n            main: function (_title, _message, _value, _onok, _oncancel) {\r\n                var title, message, value, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    value = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    break;\r\n                case 4:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 5:\r\n                    title = _title;\r\n                    message = _message;\r\n                    value = _value;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('value', value);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: input,\r\n                        select: true\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                input.className = alertify.defaults.theme.input;\r\n                input.setAttribute('type', 'text');\r\n                input.value = this.get('value');\r\n                this.elements.content.appendChild(p);\r\n                this.elements.content.appendChild(input);\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                if (typeof message === 'string') {\r\n                    clearContents(p);\r\n                    p.innerHTML = message;\r\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\r\n                    clearContents(p);\r\n                    p.appendChild(message);\r\n                }\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                labels: undefined,\r\n                onok: undefined,\r\n                oncancel: undefined,\r\n                value: '',\r\n                type:'text',\r\n                reverseButtons: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'value':\r\n                    input.value = newValue;\r\n                    break;\r\n                case 'type':\r\n                    switch (newValue) {\r\n                    case 'text':\r\n                    case 'color':\r\n                    case 'date':\r\n                    case 'datetime-local':\r\n                    case 'email':\r\n                    case 'month':\r\n                    case 'number':\r\n                    case 'password':\r\n                    case 'search':\r\n                    case 'tel':\r\n                    case 'time':\r\n                    case 'week':\r\n                        input.type = newValue;\r\n                        break;\r\n                    default:\r\n                        input.type = 'text';\r\n                        break;\r\n                    }\r\n                    break;\r\n                case 'labels':\r\n                    if (newValue.ok && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    this.settings.value = input.value;\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    if(!closeEvent.cancel){\r\n                        input.value = this.settings.value;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    // CommonJS\r\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\r\n        module.exports = alertify;\r\n    // AMD\r\n    } else if ( typeof define === 'function' && define.amd) {\r\n        define( [], function () {\r\n            return alertify;\r\n        } );\r\n    // window\r\n    } else if ( !window.alertify ) {\r\n        window.alertify = alertify;\r\n    }\r\n\r\n} ( typeof window !== 'undefined' ? window : this ) );\r\n"]},"metadata":{},"sourceType":"module"}